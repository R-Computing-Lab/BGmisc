[{"path":[]},{"path":"https://r-computing-lab.github.io/BGmisc/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement garrissm@wfu.edu. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing Guidelines for BGmisc","title":"Contributing Guidelines for BGmisc","text":"Thank considering contributing BGmisc. document outlines process best practices contributing R package hosted GitHub R Computing Lab. ## Table Contents Code Conduct Getting Started Bug Reports Feature Requests Pull Requests Code Style Testing Documentation Communication","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing Guidelines for BGmisc","text":"contributors expected adhere project’s Code Conduct. Please read carefully contributing.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/CONTRIBUTING.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Contributing Guidelines for BGmisc","text":"Fork BGmisc repository GitHub account. Clone forked repository local machine. Install required packages set development environment.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/CONTRIBUTING.html","id":"bug-reports","dir":"","previous_headings":"","what":"Bug Reports","title":"Contributing Guidelines for BGmisc","text":"reporting bugs, please create issue GitHub repository. Make sure : Provide clear title description. Include minimal reproducible example. Tag issue “bug” label.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/CONTRIBUTING.html","id":"feature-requests","dir":"","previous_headings":"","what":"Feature Requests","title":"Contributing Guidelines for BGmisc","text":"New features welcome. request new feature: Open issue GitHub repository. Clearly describe feature potential benefits. Tag issue “feature request” label.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/CONTRIBUTING.html","id":"pull-requests","dir":"","previous_headings":"","what":"Pull Requests","title":"Contributing Guidelines for BGmisc","text":"Fork repository create new branch work. Commit changes logical chunks. Open pull request clear title description. Make sure existing tests pass. Add new tests changes.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"","what":"Code Style","title":"Contributing Guidelines for BGmisc","text":"Follow Tidyverse Style Guide R programming maintain code consistency.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/CONTRIBUTING.html","id":"testing","dir":"","previous_headings":"","what":"Testing","title":"Contributing Guidelines for BGmisc","text":"Tests implemented using testthat package. Make sure add new tests added functionality. Run tests ensure pass submitting pull request.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/CONTRIBUTING.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Contributing Guidelines for BGmisc","text":"Update README.Rmd relevant documentation. Use roxygen2 documenting functions. Include examples documentation possible.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/CONTRIBUTING.html","id":"communication","dir":"","previous_headings":"","what":"Communication","title":"Contributing Guidelines for BGmisc","text":"Use GitHub issues communication. direct communication, can contact maintainers. contributing, agree abide guidelines project’s Code Conduct. Thank contributing BGmisc!","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://r-computing-lab.github.io/BGmisc/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2020 Jonathan D. Trattner  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. BGmisc Copyright (C) 2020 Jonathan D. Trattner This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v0_network.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Network tools for finding extended pedigrees and path tracing","text":"vignette showcases two key features capitalize network structure inherent pedigrees: Finding extended families connecting relationships members. feature strictly uses person’s ID, mother’s ID, father’s ID find people dataset remotely related path, effectively finding separable extended families dataset. Using path tracing rules quantify amount relatedness pairs individuals dataset. amount relatedness can characterized additive nuclear DNA, shared mitochondrial DNA, sharing parents, part extended pedigree.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v0_network.html","id":"loading-required-libraries-and-data","dir":"Articles","previous_headings":"Introduction","what":"Loading Required Libraries and Data","title":"Network tools for finding extended pedigrees and path tracing","text":"","code":"library(BGmisc) data(potter)"},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v0_network.html","id":"finding-extended-families","dir":"Articles","previous_headings":"","what":"Finding Extended Families","title":"Network tools for finding extended pedigrees and path tracing","text":"Many pedigree datasets contain information person, mother, father, often without nuclear extended family IDs. Recognizing sets people unrelated simplifies many pedigree-related tasks. function facilitates tasks finding extended families. People within extended family least form relation, however distant, different extended families relations. Potter Family Pedigree use potter pedigree data example. convenience, ’ve renamed family ID variable oldfam avoid confusion new family ID variable create. potter data already family ID variable, compare newly created variable pre-existing one. match!","code":"#> Standardizing column names... #> c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 101, 102, 104, 103, 106, 105)c(32, 32, 33, 33, 0, 1, 5, 9, 0, 0, 9, 9, 9, 9, 9, 9, 0, 35, 35, 0, 7, 7, 7, 11, 11, 16, 16, 16, 14, 14, 0, 0, 0, 0, 0, 0)c(31, 31, 34, 34, 0, 3, 4, 10, 0, 0, 10, 10, 10, 10, 10, 10, 0, 36, 36, 0, 8, 8, 8, 17, 17, 18, 18, 18, 20, 20, 0, 0, 0, 0, 0, 0)c(1, 2, 2, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 2, 1, 1, 2, 1, 2)c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) df_potter <- potter names(df_potter)[names(df_potter) == \"famID\"] <- \"oldfam\"  ds <- ped2fam(df_potter, famID = \"famID\", personID = \"personID\")  table(ds$famID, ds$oldfam) #>     #>      1 #>   1 36"},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v0_network.html","id":"computing-relatedness","dir":"Articles","previous_headings":"","what":"Computing Relatedness","title":"Network tools for finding extended pedigrees and path tracing","text":"know sets people related one another, ’ll likely want know much. additive genetic relatedness, can use ped2add() function. computes additive genetic relatedness everyone data. returns square, symmetric matrix many rows columns IDs. entry ith row jth column gives relatedness person person j. example, person 1 (Vernon Dursley) shares 0.5 nuclear DNA person 6 (Dudley Dursley), shares 0.5 nuclear DNA person 2 (Marjorie Dursley). ’s probably fine whole dataset data fewer 10,000 people. data get large, however, ’s much efficient compute relatedness separately extended family.","code":"add <- ped2add(potter, sparse = FALSE) add[1:7, 1:7] #>     1    2    3    4   5     6     7 #> 1 1.0 0.50 0.00 0.00 0.0 0.500 0.000 #> 2 0.5 1.00 0.00 0.00 0.0 0.250 0.000 #> 3 0.0 0.00 1.00 0.50 0.0 0.500 0.250 #> 4 0.0 0.00 0.50 1.00 0.0 0.250 0.500 #> 5 0.0 0.00 0.00 0.00 1.0 0.000 0.500 #> 6 0.5 0.25 0.50 0.25 0.0 1.000 0.125 #> 7 0.0 0.00 0.25 0.50 0.5 0.125 1.000 table(add) #> add #>      0 0.0625  0.125   0.25    0.5      1  #>    788      6     94    208    164     36 add_list <- lapply(   unique(potter$famID),   function(d) {     tmp <- potter[potter$famID %in% d, ]     ped2add(tmp, sparse = FALSE)   } )"},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v0_network.html","id":"other-relatedness-measures","dir":"Articles","previous_headings":"Computing Relatedness","what":"Other relatedness measures","title":"Network tools for finding extended pedigrees and path tracing","text":"function works similarly mitochondrial (ped2mit), common nuclear environment sharing parents (ped2cn), common extended family environment (ped2ce).","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v0_network.html","id":"computing-mitochondrial-relatedness","dir":"Articles","previous_headings":"Computing Relatedness > Other relatedness measures","what":"Computing mitochondrial relatedness","title":"Network tools for finding extended pedigrees and path tracing","text":"calculate mitochondrial relatedness pairs individuals potter dataset. can see, family members share mitochondrial DNA, person 2 person 3 0, whereas person 1 person 3 .","code":"mit <- ped2mit(potter, sparse = FALSE) mit[1:7, 1:7] #>   1 2 3 4 5 6 7 #> 1 1 1 0 0 0 0 0 #> 2 1 1 0 0 0 0 0 #> 3 0 0 1 1 0 1 1 #> 4 0 0 1 1 0 1 1 #> 5 0 0 0 0 1 0 0 #> 6 0 0 1 1 0 1 1 #> 7 0 0 1 1 0 1 1 table(mit) #> mit #>    0    1  #> 1082  214"},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v0_network.html","id":"computing-relatedness-through-common-nuclear-environment","dir":"Articles","previous_headings":"Computing Relatedness > Other relatedness measures","what":"Computing relatedness through common nuclear environment","title":"Network tools for finding extended pedigrees and path tracing","text":"calculate relatedness pairs individuals potter dataset sharing parents.","code":"commonNuclear <- ped2cn(potter, sparse = FALSE) commonNuclear[1:7, 1:7] #>   1 2 3 4 5 6 7 #> 1 1 1 0 0 0 0 0 #> 2 1 1 0 0 0 0 0 #> 3 0 0 1 1 0 0 0 #> 4 0 0 1 1 0 0 0 #> 5 0 0 0 0 1 0 0 #> 6 0 0 0 0 0 1 0 #> 7 0 0 0 0 0 0 1  table(commonNuclear) #> commonNuclear #>    0    1  #> 1196  100"},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v0_network.html","id":"computing-relatedness-through-common-extended-family-environment","dir":"Articles","previous_headings":"Computing Relatedness > Other relatedness measures","what":"Computing relatedness through common extended family environment","title":"Network tools for finding extended pedigrees and path tracing","text":"calculate relatedness pairs individuals potter dataset sharing extended family.","code":"extendedFamilyEnvironment <- ped2ce(potter, sparse = FALSE) extendedFamilyEnvironment[1:7, 1:7] #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    1    1    1    1    1    1    1 #> [2,]    1    1    1    1    1    1    1 #> [3,]    1    1    1    1    1    1    1 #> [4,]    1    1    1    1    1    1    1 #> [5,]    1    1    1    1    1    1    1 #> [6,]    1    1    1    1    1    1    1 #> [7,]    1    1    1    1    1    1    1 table(extendedFamilyEnvironment) #> extendedFamilyEnvironment #>    1  #> 1296"},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v0_network.html","id":"subsetting-pedigrees","dir":"Articles","previous_headings":"","what":"Subsetting Pedigrees","title":"Network tools for finding extended pedigrees and path tracing","text":"Subsetting pedigree allows researchers focus specific family lines individuals within larger dataset. can particularly useful data validation well simplifying complex pedigrees visualization. However, subsetting pedigree can result underestimation relatedness individuals. subsetted pedigree may contain individuals connect two people together. example remove Arthur Weasley (person 9) Molly Prewett (person 10) potter dataset, lose connections amongst children. Potter Subset Pedigree plot , removed Arthur Weasley (person 9) Molly Prewett (person 10) potter dataset. result, connections children lost. Similarly, remove children Vernon Dursley (1) Petunia Evans (3) potter dataset, lose connections two individuals. However, subset plot relationship spouses (marriage Vernon Dursley Petunia Evans), children connect two individuals together yet.","code":"#> Standardizing column names... #> c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)c(1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 101, 102, 104, 103, 106, 105)c(30, 30, 31, 31, 0, 1, 5, 0, 0, 0, 0, 0, 0, 0, 0, 33, 33, 0, 7, 7, 7, 9, 9, 14, 14, 14, 12, 12, 0, 0, 0, 0, 0, 0)c(29, 29, 32, 32, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 34, 34, 0, 8, 8, 8, 15, 15, 16, 16, 16, 18, 18, 0, 0, 0, 0, 0, 0)c(1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 2, 1, 1, 2, 1, 2)c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) subset_rows <- c(1:5, 31:36) subset_potter <- potter[subset_rows, ] #> Standardizing column names... #> c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)c(1, 2, 3, 4, 5, 101, 102, 104, 103, 106, 105)c(7, 7, 8, 8, 0, 0, 0, 0, 0, 0, 0)c(6, 6, 9, 9, 0, 0, 0, 0, 0, 0, 0)c(1, 2, 2, 2, 1, 2, 1, 1, 2, 1, 2)c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)"},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v1_modelingvariancecomponents.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Modeling variance components","text":"vignette provides detailed guide specific functions within BGmisc package aid identification fitting variance component models common behavior genetics. explore key functions identifyComponentModel, providing practical examples theoretical background. Identification ensures unique set parameters define model-implied covariance matrix, preventing free parameters trading one another.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v1_modelingvariancecomponents.html","id":"loading-required-libraries","dir":"Articles","previous_headings":"Introduction","what":"Loading Required Libraries","title":"Modeling variance components","text":"Ensure BGmisc package installed loaded. Ensure following dependencies installed proceeding provide us behavior genetic data models: EasyMx OpenMx Note: libraries installed, can install using install.packages(“package_name”).","code":"library(BGmisc) library(EasyMx) library(OpenMx)"},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v1_modelingvariancecomponents.html","id":"working-with-variance-component-models","dir":"Articles","previous_headings":"","what":"Working with Variance Component Models","title":"Modeling variance components","text":"section, demonstrate core functions related identification fitting variance component models.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v1_modelingvariancecomponents.html","id":"using-comp2vech-function","dir":"Articles","previous_headings":"Working with Variance Component Models","what":"Using comp2vech Function","title":"Modeling variance components","text":"comp2vech function used vectorize components model. function often used conjunction identification process. example, apply list matrices: result showcases matrices transformed, reflecting role subsequent variance component analysis.","code":"comp2vech(list(   matrix(c(1, .5, .5, 1), 2, 2),   matrix(1, 2, 2) )) #> [1] 1.0 0.5 1.0 1.0 1.0 1.0"},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v1_modelingvariancecomponents.html","id":"using-identifycomponentmodel-function","dir":"Articles","previous_headings":"Working with Variance Component Models","what":"Using identifyComponentModel Function","title":"Modeling variance components","text":"identifyComponentModel function helps determine variance components model identified. accepts relatedness component matrices returns information identified non-identified parameters. ’s example using classical twin model MZ twins: can see, model identified. need add additional group sufficient information. Let us add rest classical twin model, case DZ twins. can see model identified, now ’ve added another group. Let us confirm fitting model. First prepare data. Let us fit data MZ twins . can see model unsuccessful identified. add another group, model identified, model now fits.","code":"identifyComponentModel(   A = list(matrix(1, 2, 2)),   C = list(matrix(1, 2, 2)),   E = diag(1, 2) ) #> Component model is not identified. #> Non-identified parameters are  A, C #> $identified #> [1] FALSE #>  #> $nidp #> [1] \"A\" \"C\" identifyComponentModel(   A = list(matrix(c(1, .5, .5, 1), 2, 2), matrix(1, 2, 2)),   C = list(matrix(1, 2, 2), matrix(1, 2, 2)),   E = diag(1, 4) ) #> Component model is identified. #> $identified #> [1] TRUE #>  #> $nidp #> character(0) require(dplyr) #> Loading required package: dplyr #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union # require(purrr)  data(twinData, package = \"OpenMx\") selVars <- c(\"ht1\", \"ht2\")  mzdzData <- subset(   twinData, zyg %in% c(1, 3),   c(selVars, \"zyg\") )  mzdzData$RCoef <- c(1, NA, .5)[mzdzData$zyg]   mzData <- mzdzData %>% filter(zyg == 1) run1 <- emxTwinModel(   model = \"Cholesky\",   relatedness = \"RCoef\",   data = mzData,   use = selVars,   run = TRUE, name = \"TwCh\" ) #> Running TwCh with 4 parameters  summary(run1) #> Summary of TwCh  #>   #> free parameters: #>      name matrix row col   Estimate    Std.Error A lbound ubound #> 1 sqrtA11  sqrtA   1   1 0.05122646           NA    1e-06        #> 2 sqrtC11  sqrtC   1   1 0.03518629           NA       0!        #> 3 sqrtE11  sqrtE   1   1 0.02325722 0.0007017955 !     0!        #> 4    Mht1  Means ht1   1 1.62974908 0.0027023907                 #>  #> Model Statistics:  #>                |  Parameters  |  Degrees of Freedom  |  Fit (-2lnL units) #>        Model:              4                   1112             -3693.148 #>    Saturated:              5                   1111                    NA #> Independence:              4                   1112                    NA #> Number of observations/statistics: 569/1116 #>  #> Information Criteria:  #>       |  df Penalty  |  Parameters Penalty  |  Sample-Size Adjusted #> AIC:      -5917.148              -3685.148                -3685.078 #> BIC:     -10747.543              -3667.773                -3680.471 #> To get additional fit indices, see help(mxRefModels) #> timestamp: 2025-05-29 16:38:34  #> Wall clock time: 0.126956 secs  #> optimizer:  SLSQP  #> OpenMx version number: 2.22.7  #> Need help?  See help(mxSummary) run2 <- emxTwinModel(   model = \"Cholesky\",   relatedness = \"RCoef\",   data = mzdzData,   use = selVars,   run = TRUE, name = \"TwCh\" ) #> Running TwCh with 4 parameters  summary(run2) #> Summary of TwCh  #>   #> free parameters: #>      name matrix row col   Estimate    Std.Error A lbound ubound #> 1 sqrtA11  sqrtA   1   1 0.06339271 0.0014377690    1e-06        #> 2 sqrtC11  sqrtC   1   1 0.00000100 0.0250260004 !     0!        #> 3 sqrtE11  sqrtE   1   1 0.02330040 0.0007015267       0!        #> 4    Mht1  Means ht1   1 1.63295540 0.0020511844                 #>  #> Model Statistics:  #>                |  Parameters  |  Degrees of Freedom  |  Fit (-2lnL units) #>        Model:              4                   1803             -5507.092 #>    Saturated:              5                   1802                    NA #> Independence:              4                   1803                    NA #> Number of observations/statistics: 920/1807 #>  #> Information Criteria:  #>       |  df Penalty  |  Parameters Penalty  |  Sample-Size Adjusted #> AIC:      -9113.092              -5499.092                -5499.048 #> BIC:     -17811.437              -5479.794                -5492.498 #> To get additional fit indices, see help(mxRefModels) #> timestamp: 2025-05-29 16:38:34  #> Wall clock time: 0.05050611 secs  #> optimizer:  SLSQP  #> OpenMx version number: 2.22.7  #> Need help?  See help(mxSummary)"},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v2_pedigree.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Pedigree Simulation and Visualization with BGmisc","text":"Unlike Tolstoy, happy families alike, pedigrees alike – least, simulated pedigrees alike. simulatePedigree function generates pedigree user-specified number generations individuals per generation. function provides users opportunity test family models pedigrees customized pedigree length width. pedigrees can simulated function several parameters, including number children per mate, generations, sex ratio newborns, mating rate. Given large family pedigrees difficult collect access, simulated pedigrees serve efficient tool researchers. simulated pedigrees useful building family-based statistical models, evaluating statistical properties, power, bias, computational efficiency. illustrate functionality, let us generate pedigree. pedigree total four generations (Ngen), person “mates”, grows family four offspring (kpc). scenario, number male female newborns equal, can adjusted via (sexR). illustration 70% individuals mate bear offspring (marR). pedigree structure can simulated running following code: simulation output data.frame 57 rows 7 columns. row corresponds simulated individual. columns represents individual’s family ID, individual’s personal ID, generation individual , IDs father mother, ID spouse, biological sex individual, respectively.","code":"## Loading Required Libraries library(BGmisc)  set.seed(5) df_ped <- simulatePedigree(   kpc = 4,   Ngen = 4,   sexR = .5,   marR = .7 ) summary(df_ped) #>      fam                  ID              gen            dadID        #>  Length:57          Min.   : 10011   Min.   :1.000   Min.   : 10012   #>  Class :character   1st Qu.: 10036   1st Qu.:3.000   1st Qu.: 10024   #>  Mode  :character   Median :100312   Median :3.000   Median : 10037   #>                     Mean   : 59171   Mean   :3.298   Mean   : 42859   #>                     3rd Qu.:100416   3rd Qu.:4.000   3rd Qu.:100311   #>                     Max.   :100432   Max.   :4.000   Max.   :100320   #>                                                      NA's   :13       #>      momID             spID            sex            #>  Min.   : 10011   Min.   : 10011   Length:57          #>  1st Qu.: 10022   1st Qu.: 10025   Class :character   #>  Median : 10036   Median : 10036   Mode  :character   #>  Mean   : 42859   Mean   : 40124                      #>  3rd Qu.:100316   3rd Qu.:100311                      #>  Max.   :100318   Max.   :100320                      #>  NA's   :13       NA's   :33 df_ped[21, ] #>      fam     ID gen dadID momID   spID sex #> 21 fam 1 100312   3 10024 10022 100317   M"},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v2_pedigree.html","id":"summarizing-pedigrees","dir":"Articles","previous_headings":"Introduction","what":"Summarizing Pedigrees","title":"Pedigree Simulation and Visualization with BGmisc","text":"","code":"summarizeFamilies(df_ped, famID = \"fam\")$family_summary #>       fam count gen_mean gen_median gen_min gen_max    gen_sd spID_mean #>    <char> <int>    <num>      <num>   <num>   <num>     <num>     <num> #> 1:  fam 1    57 3.298246          3       1       4 0.8229935   40123.5 #>    spID_median spID_min spID_max  spID_sd #>          <num>    <num>    <num>    <num> #> 1:     10035.5    10011   100320 43476.96"},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v2_pedigree.html","id":"plotting-pedigree","dir":"Articles","previous_headings":"Introduction","what":"Plotting Pedigree","title":"Pedigree Simulation and Visualization with BGmisc","text":"Pedigrees visual diagrams represent family relationships across generations. commonly used genetics trace inheritance specific traits conditions. vignette guide visualizing simulated pedigrees using plotPedigree function. function wrapper function Kinship2’s base R plotting.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v2_pedigree.html","id":"single-pedigree-visualization","dir":"Articles","previous_headings":"Introduction > Plotting Pedigree","what":"Single Pedigree Visualization","title":"Pedigree Simulation and Visualization with BGmisc","text":"visualize single simulated pedigree, use plotPedigree() function.  resulting plot, biological males represented squares, biological females represented circles, following standard pedigree conventions.","code":"# Plot the simulated pedigree plotPedigree(df_ped) #> Did not plot the following people: 10032 #> named list()"},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v2_pedigree.html","id":"visualizing-multiple-pedigrees-side-by-side","dir":"Articles","previous_headings":"Introduction > Plotting Pedigree","what":"Visualizing Multiple Pedigrees Side-by-Side","title":"Pedigree Simulation and Visualization with BGmisc","text":"wish compare different pedigrees side side, can plot together. instance, let’s visualize pedigrees families spanning three four generations, respectively.  examining side--side plots, can contrast analyze structures different families, tracing inheritance specific traits conditions needed.","code":"set.seed(8) # Simulate a family with 3 generations df_ped_3 <- simulatePedigree(Ngen = 3)  # Simulate a family with 4 generations df_ped_4 <- simulatePedigree(Ngen = 4)  # Set up plotting parameters for side-by-side display par(mfrow = c(1, 2))  # Plot the 3-generation pedigree plotPedigree(df_ped_3, width = 3) #> named list()  # Plot the 4-generation pedigree plotPedigree(df_ped_4, width = 1) #> named list()"},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v3_analyticrelatedness.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Understanding and Computing Relatedness from Pedigree Data","text":"individuals share common ancestors, genetically related: expected carry proportion alleles identical descent. expectation—called relatedness coefficient—central many areas genetics, including heritability estimation, pedigree-based modeling, twin family studies, construction kinship matrices mixed-effects models. Understanding relatedness key interpreting familial resemblance, controlling shared genetic structure statistical models, simulating analyzing traits across multigenerational pedigrees. idea “siblings 50% related” familiar, reasoning behind numbers—compute across complex family structures—less transparent. vignette introduces concept relatedness first principles walks calculated pedigree data. begins illustrative examples explain expected relatedness values familiar relationships using simplified functions. examples clarify shared ancestry translates probabilistic expectations genetic similarity. , vignette introduces general-purpose matrix-based method computing pairwise relatedness across pedigrees. Using ped2com() function, demonstrate build additive genetic relationship matrices complete incomplete parentage, evaluate different assumptions affect resulting estimates. goal provide clear, rigorous, practical guide computing relatedness real data.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v3_analyticrelatedness.html","id":"relatedness-coefficient","dir":"Articles","previous_headings":"","what":"Relatedness Coefficient","title":"Understanding and Computing Relatedness from Pedigree Data","text":"relatedness coefficient rr indexes proportion alleles shared identically descent (IBD) two individuals. value ranges 0 (shared alleles descent) 1 (perfect genetic match, occurs comparing individual , identical twin, clone). Values can interpreted context standard relationships: e.g., full siblings expected r=0.5r = 0.5, half siblings r=0.25r = 0.25, first cousins r=0.125r = 0.125. Wright’s (1922) classic formulation computes 𝑟 summing across shared ancestry paths: rbc=∑(12)n+n′+1(1+fa) r_{bc} = \\sum \\left(\\frac{1}{2}\\right)^{n+n'+1} (1+f_a) , nn n′n' number generations descendant common ancestor aa, faf_a inbreeding coefficient aa, assumed zero unless specified otherwise. function calculateRelatedness computes relatedness coefficient based number generations back common ancestors, whether individuals full siblings, parameters. function can used calculate relatedness various family structures, including full siblings, half siblings, cousins. logic reflects number type shared parents. full siblings, parents shared (generational paths = 1 + 1), half siblings one (effectively halving probability sharing allele). otherwords, full = TRUE, sibling one generation shared pair parents, yielding r=0.5. full = FALSE, share one parent, yielding r=0.25.","code":"library(BGmisc) # Example usage: # For full siblings, the relatedness coefficient is expected to be 0.5: calculateRelatedness(generations = 1, full = TRUE) #> [1] 0.5 # For half siblings, the relatedness coefficient is expected to be 0.25: calculateRelatedness(generations = 1, full = FALSE) #> [1] 0.25"},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v3_analyticrelatedness.html","id":"inferring-r-from-observed-phenotypic-correlation","dir":"Articles","previous_headings":"","what":"Inferring r from Observed Phenotypic Correlation","title":"Understanding and Computing Relatedness from Pedigree Data","text":"cases, observe phenotypic correlation (e.g., height, cognition) two individuals want infer value r consistent correlation fixed ACE model inferRelatedness function inverts equation: obsR=r⋅a2+sharedC⋅c2 \\text{obsR} = r \\cdot ^2 + \\text{sharedC} \\cdot c^2 solve : r=obsR−sharedC⋅c2a2  r = \\frac{\\text{obsR} - \\text{sharedC} \\cdot c^2}{^2} : - obsR observed phenotypic correlation two individuals groups. - aceA aceC represent proportions variance due additive genetic shared environmental influences, respectively. - sharedC shared-environment analog relatedness coefficient: indicates proportion shared environmental variance applies pair (e.g., 1 siblings raised together, 0 siblings raised apart). example, observed correlation 0.5, shared environmental variance assumed. Given additive genetic variance accounts 90% trait variance, inferred relatedness coefficient approximately 0.556. reflects proportion genetic overlap required produce observed similarity assumptions. case, observed phenotypic correlation still 0.5, additive genetic shared environmental components assumed explain 45% variance. shared environment fully shared individuals (sharedC = 1), much observed similarity attributed C, leaving small portion attributable genetic relatedness. function returns inferred relatedness coefficient approximately 0.11 — , amount additive genetic overlap required (model) produce remaining unexplained correlation accounting shared environmental similarity.","code":"# Example usage: # Infer the relatedness coefficient: inferRelatedness(obsR = 0.5, aceA = 0.9, aceC = 0, sharedC = 0) #> [1] 0.5555556 # Now assume shared environment is fully shared: inferRelatedness(obsR = 0.5, aceA = 0.45, aceC = 0.45, sharedC = 1) #> [1] 0.1111111"},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v3_analyticrelatedness.html","id":"computing-relatedness-from-pedigree-data","dir":"Articles","previous_headings":"","what":"Computing Relatedness from Pedigree Data","title":"Understanding and Computing Relatedness from Pedigree Data","text":"ped2com function computes relationship matrices pedigree data using recursive algorithm based parent-offspring connections. Central computation parent adjacency matrix, defines individuals pedigree connected across generations. adjacency matrix acts structural input genetic relatedness propagated. function offers two methods constructing matrix: classic method, assumes parents known adjacency matrix complete. partial parent method, allows missing values parent adjacency matrix. parent data complete, methods return equivalent results. parental information missing, behavior diverges. vignette illustrates differences emerge, conditions partial method provides accurate results.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v3_analyticrelatedness.html","id":"hazard-data-example","dir":"Articles","previous_headings":"Computing Relatedness from Pedigree Data","what":"Hazard Data Example","title":"Understanding and Computing Relatedness from Pedigree Data","text":"begin hazard dataset. First, examine behavior complete pedigree data.  compute additive genetic relationship matrix using classic partial parent methods. pedigree complete, expect differences resulting matrices. following plots display full additive matrices. matrices identical. can confirmed visually numerically.   verify , subtract one matrix calculate RMSE. difference numerically zero. Indeed, 0.","code":"library(BGmisc) library(ggpedigree) data(hazard)  df <- hazard |> dplyr::rename(personID = ID) # this is the data that we will use for the example  # Plot the pedigree to visualize relationships  ggpedigree(df, config = list(   personID = \"personID\",   momID = \"momID\",   dadID = \"dadID\",   famID = \"famID\",   code_male = 0 )) ped_add_partial_complete <- ped2com(df,   isChild_method = \"partialparent\",   component = \"additive\",   adjacency_method = \"direct\",   sparse = FALSE ) ped_add_classic_complete <- ped2com(df,   isChild_method = \"classic\",   component = \"additive\", adjacency_method = \"direct\",   sparse = FALSE ) library(ggpedigree) ggRelatednessMatrix(as.matrix(ped_add_classic_complete),   config =     list(title = \"Additive component - Classic method\") ) ggRelatednessMatrix(as.matrix(ped_add_partial_complete),   config =     list(title = \"Additive component - Partial parent method\") ) library(corrplot) #> corrplot 0.95 loaded corrplot((as.matrix(ped_add_classic_complete) - as.matrix(ped_add_partial_complete)),   method = \"color\", type = \"lower\", col.lim = c(0, 1),   is.corr = FALSE, order = \"hclust\",   tl.pos = \"l\", tl.col = \"black\", tl.srt = 5, tl.cex = 0.2,   col = COL1(\"Reds\", 100), mar = c(0, 0, 2, 0) )"},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v3_analyticrelatedness.html","id":"introducing-missingness-remove-a-parent","dir":"Articles","previous_headings":"Computing Relatedness from Pedigree Data","what":"Introducing Missingness: Remove a Parent","title":"Understanding and Computing Relatedness from Pedigree Data","text":"observe two methods diverge data incomplete, remove one parent—starting mother individual 4. two methods now treat individual 4 differently parent adjacency matrix. classic method applies fixed contribution one parent remains. partial parent method inflates individual’s diagonal contribution account missing parent. resulting additive matrices reflect difference. RMSE two matrices 0.   quantify overall matrix difference: Next, compare method matrix complete pedigree. evaluates much method deviates correct additive structure.  RMSE true additive component classic method 0.  RMSE true additive component partial parent method 0. partial method shows smaller deviations complete matrix, confirming better preserves relatedness structure one parent missing.","code":"df$momID[df$ID == 4] <- NA ped_add_partial_mom <- ped_add_partial <- ped2com(df,   isChild_method = \"partialparent\",   component = \"additive\",   adjacency_method = \"direct\",   sparse = FALSE )  ped_add_classic_mom <- ped_add_classic <- ped2com(df,   isChild_method = \"classic\",   component = \"additive\", adjacency_method = \"direct\",   sparse = FALSE ) corrplot(as.matrix(ped_add_classic),   method = \"color\", type = \"lower\", col.lim = c(0, 1),   is.corr = FALSE, title = \"Classic (mother removed)\",   order = \"hclust\",   tl.pos = \"l\", tl.col = \"black\", tl.srt = 5, tl.cex = 0.2,   col = COL1(\"Reds\", 100), mar = c(0, 0, 2, 0) ) corrplot(as.matrix(ped_add_partial),   method = \"color\", type = \"lower\", col.lim = c(0, 1),   is.corr = FALSE, title = \"Partial (mother removed)\",   order = \"hclust\",   tl.pos = \"l\", tl.col = \"black\", tl.srt = 5, tl.cex = 0.2,   col = COL1(\"Reds\", 100), mar = c(0, 0, 2, 0) ) sqrt(mean((as.matrix(ped_add_classic) - as.matrix(ped_add_partial))^2)) #> [1] 0 corrplot(as.matrix(ped_add_classic_complete) - as.matrix(ped_add_classic),   method = \"color\", type = \"lower\", col.lim = c(0, 1),   is.corr = FALSE,   order = \"hclust\",   tl.pos = \"l\", tl.col = \"black\", tl.srt = 5, tl.cex = 0.2,   col = COL1(\"Reds\", 100), mar = c(0, 0, 2, 0) ) #> Warning in corrplot(as.matrix(ped_add_classic_complete) - #> as.matrix(ped_add_classic), : col.lim interval too wide, please set a suitable #> value sqrt(mean((ped_add_classic_complete - ped_add_classic)^2)) #> [1] 0 corrplot(as.matrix(ped_add_classic_complete - ped_add_partial),   method = \"color\", type = \"lower\", col.lim = c(0, 1),   is.corr = FALSE,   order = \"hclust\",   tl.pos = \"l\", tl.col = \"black\", tl.srt = 5, tl.cex = 0.2,   col = COL1(\"Reds\", 100), mar = c(0, 0, 2, 0) ) #> Warning in corrplot(as.matrix(ped_add_classic_complete - ped_add_partial), : #> col.lim interval too wide, please set a suitable value sqrt(mean((ped_add_classic_complete - ped_add_partial)^2)) #> [1] 0"},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v3_analyticrelatedness.html","id":"removing-the-father-instead","dir":"Articles","previous_headings":"Computing Relatedness from Pedigree Data > Introducing Missingness: Remove a Parent","what":"Removing the Father Instead","title":"Understanding and Computing Relatedness from Pedigree Data","text":"now repeat process, time removing father individual 4. can see, two matrices different. RMSE two matrices 0.009811.   , compare true matrix complete pedigree:   partial parent method yields matrix closer full-data version.","code":"data(hazard)  df <- hazard # this is the data that we will use for the example   df$dadID[df$ID == 4] <- NA # add ped_add_partial_dad <- ped_add_partial <- ped2com(df,   isChild_method = \"partialparent\",   component = \"additive\",   adjacency_method = \"direct\",   sparse = FALSE )  ped_add_classic_dad <- ped_add_classic <- ped2com(df,   isChild_method = \"classic\",   component = \"additive\", adjacency_method = \"direct\",   sparse = FALSE ) corrplot(as.matrix(ped_add_classic_dad),   method = \"color\", type = \"lower\", col.lim = c(0, 1),   is.corr = FALSE, title = \"Classic (father removed)\",   order = \"hclust\",   tl.pos = \"l\", tl.col = \"black\", tl.srt = 5, tl.cex = 0.2,   col = COL1(\"Reds\", 100), mar = c(0, 0, 2, 0) ) corrplot(as.matrix(ped_add_partial_dad),   method = \"color\", type = \"lower\", col.lim = c(0, 1),   is.corr = FALSE, title = \"Partial (father removed)\",   order = \"hclust\",   tl.pos = \"l\", tl.col = \"black\", tl.srt = 5, tl.cex = 0.2,   col = COL1(\"Reds\", 100), mar = c(0, 0, 2, 0) ) corrplot(as.matrix(ped_add_classic_complete - ped_add_classic),   method = \"color\", type = \"lower\", col.lim = c(0, 1),   is.corr = FALSE,   order = \"hclust\",   tl.pos = \"l\", tl.col = \"black\", tl.srt = 5, tl.cex = 0.2,   col = COL1(\"Reds\", 100), mar = c(0, 0, 2, 0) ) sqrt(mean((ped_add_classic_complete - ped_add_classic)^2)) #> [1] 0.02991371 corrplot(as.matrix(ped_add_classic_complete - ped_add_partial),   method = \"color\", type = \"lower\", col.lim = c(0, 1),   is.corr = FALSE,   order = \"hclust\",   tl.pos = \"l\", tl.col = \"black\", tl.srt = 5, tl.cex = 0.2,   col = COL1(\"Reds\", 100), mar = c(0, 0, 2, 0) ) sqrt(mean((ped_add_classic_complete - ped_add_partial)^2)) #> [1] 0.02825904"},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v3_analyticrelatedness.html","id":"inbreeding-dataset-family-level-evaluation","dir":"Articles","previous_headings":"Computing Relatedness from Pedigree Data","what":"Inbreeding Dataset: Family-Level Evaluation","title":"Understanding and Computing Relatedness from Pedigree Data","text":"generalize comparison across larger varied set pedigrees, use inbreeding dataset. family dataset analyzed independently. one, construct additive relationship matrix complete information simulate two missingness scenarios: Missing mother: One individual known mother randomly selected, mother’s ID set NA. Missing father: Similarly, one individual known father selected, father’s ID set NA. condition, recompute additive matrix using classic partial parent methods. calculate RMSE estimate matrix complete pedigree. allows us quantify method accurately reconstructs original relatedness structure parental data partially missing. loop performs procedure families dataset stores RMSEs maximum relatedness values.","code":"data(\"inbreeding\")  df <- inbreeding  famIDs <- unique(df$famID) inbreeding_list <- list() results <- data.frame(   famIDs = famIDs,   RMSE_partial_dad = rep(NA, length(famIDs)),   RMSE_partial_mom = rep(NA, length(famIDs)),   RMSE_classic_dad = rep(NA, length(famIDs)),   RMSE_classic_mom = rep(NA, length(famIDs)),   max_R_classic_dad = rep(NA, length(famIDs)),   max_R_partial_dad = rep(NA, length(famIDs)),   max_R_classic_mom = rep(NA, length(famIDs)),   max_R_partial_mom = rep(NA, length(famIDs)),   max_R_classic = rep(NA, length(famIDs)) ) for (i in 1:length(famIDs)) {   # make three versions to filter down   df_fam_dad <- df_fam_mom <- df_fam <- df[df$famID == famIDs[i], ]    results$RMSE_partial_mom[i] <- sqrt(mean((ped_add_classic_complete - ped_add_partial_mom)^2))     ped_add_partial_complete <- ped2com(df_fam,     isChild_method = \"partialparent\",     component = \"additive\",     adjacency_method = \"direct\",     sparse = FALSE   )    ped_add_classic_complete <- ped2com(df_fam,     isChild_method = \"classic\",     component = \"additive\",     adjacency_method = \"direct\",     sparse = FALSE   )     # select first ID with a mom and dad   momid_to_cut <- head(df_fam$ID[!is.na(df_fam$momID)], 1)   dadid_to_cut <- head(df_fam$ID[!is.na(df_fam$dadID)], 1)    df_fam_dad$dadID[df_fam$ID == dadid_to_cut] <- NA    df_fam_mom$momID[df_fam$ID == momid_to_cut] <- NA    ped_add_partial_dad <- ped2com(df_fam_dad,     isChild_method = \"partialparent\",     component = \"additive\",     adjacency_method = \"direct\",     sparse = FALSE   )   ped_add_classic_dad <- ped2com(df_fam_dad,     isChild_method = \"classic\",     component = \"additive\", adjacency_method = \"direct\",     sparse = FALSE   )    results$RMSE_partial_dad[i] <- sqrt(mean((ped_add_classic_complete - ped_add_partial_dad)^2))   results$RMSE_classic_dad[i] <- sqrt(mean((ped_add_classic_complete - ped_add_classic_dad)^2))   results$max_R_classic_dad[i] <- max(as.matrix(ped_add_classic_dad))   results$max_R_partial_dad[i] <- max(as.matrix(ped_add_partial_dad))     ped_add_partial_mom <- ped2com(df_fam_mom,     isChild_method = \"partialparent\",     component = \"additive\",     adjacency_method = \"direct\",     sparse = FALSE   )    ped_add_classic_mom <- ped2com(df_fam_mom,     isChild_method = \"classic\",     component = \"additive\", adjacency_method = \"direct\",     sparse = FALSE   )    results$RMSE_partial_mom[i] <- sqrt(mean((ped_add_classic_complete - ped_add_partial_mom)^2))   results$RMSE_classic_mom[i] <- sqrt(mean((ped_add_classic_complete - ped_add_classic_mom)^2))   results$max_R_classic_mom[i] <- max(as.matrix(ped_add_classic_mom))   results$max_R_partial_mom[i] <- max(as.matrix(ped_add_partial_mom))   results$max_R_classic[i] <- max(as.matrix(ped_add_classic_complete))    inbreeding_list[[i]] <- list(     df_fam = df_fam,     ped_add_partial_complete = ped_add_partial_complete,     ped_add_classic_complete = ped_add_classic_complete,     ped_add_partial_dad = ped_add_partial_dad,     ped_add_classic_dad = ped_add_classic_dad,     ped_add_partial_mom = ped_add_partial_mom,     ped_add_classic_mom = ped_add_classic_mom   ) }"},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v3_analyticrelatedness.html","id":"example-family-1","dir":"Articles","previous_headings":"Computing Relatedness from Pedigree Data > Inbreeding Dataset: Family-Level Evaluation","what":"Example: Family 1","title":"Understanding and Computing Relatedness from Pedigree Data","text":"understand matrices look like, visualize one representative family. example, select first family dataset.       visualize differences true matrix:     plots show method responds missing data, whether maintains consistency complete pedigree. observe partial parent method typically introduces smaller deviations. desired, diagnostic can repeated additional families, inbreeding_list[[2]].","code":"#> named list() # pull the first family from the list fam1 <- inbreeding_list[[1]]  corrplot(as.matrix(fam1$ped_add_classic_complete),   method = \"color\", type = \"lower\", col.lim = c(0, 1),   is.corr = FALSE, title = \"Classic - Complete\",   order = \"hclust\",   tl.pos = \"l\", tl.col = \"black\", tl.srt = 5, tl.cex = 0.2,   col = COL1(\"Reds\", 100), mar = c(0, 0, 2, 0) ) corrplot(as.matrix(fam1$ped_add_classic_mom),   method = \"color\", type = \"lower\", col.lim = c(0, 1),   is.corr = FALSE, title = \"Classic - Mom Missing\",   order = \"hclust\",   tl.pos = \"l\", tl.col = \"black\", tl.srt = 5, tl.cex = 0.2,   col = COL1(\"Reds\", 100), mar = c(0, 0, 2, 0) ) corrplot(as.matrix(fam1$ped_add_partial_mom),   method = \"color\", type = \"lower\", col.lim = c(0, 1),   is.corr = FALSE, title = \"Partial - Mom Missing\",   order = \"hclust\",   tl.pos = \"l\", tl.col = \"black\", tl.srt = 5, tl.cex = 0.2,   col = COL1(\"Reds\", 100), mar = c(0, 0, 2, 0) ) corrplot(as.matrix(fam1$ped_add_classic_dad),   method = \"color\", type = \"lower\", col.lim = c(0, 1),   is.corr = FALSE, title = \"Classic - Dad Missing\",   order = \"hclust\",   tl.pos = \"l\", tl.col = \"black\", tl.srt = 5, tl.cex = 0.2,   col = COL1(\"Reds\", 100), mar = c(0, 0, 2, 0) ) corrplot(as.matrix(fam1$ped_add_partial_dad),   method = \"color\", type = \"lower\", col.lim = c(0, 1),   is.corr = FALSE, title = \"Partial - Dad Missing\",   order = \"hclust\",   tl.pos = \"l\", tl.col = \"black\", tl.srt = 5, tl.cex = 0.2,   col = COL1(\"Reds\", 100), mar = c(0, 0, 2, 0) ) corrplot(as.matrix(fam1$ped_add_classic_complete - fam1$ped_add_classic_mom),   method = \"color\", type = \"lower\", col.lim = c(0, 1),   is.corr = FALSE, title = \"Classic Mom Diff from Complete\",   order = \"hclust\",   tl.pos = \"l\", tl.col = \"black\", tl.srt = 5, tl.cex = 0.2,   col = COL1(\"Reds\", 100), mar = c(0, 0, 2, 0) ) corrplot(as.matrix(fam1$ped_add_classic_complete - fam1$ped_add_partial_mom),   method = \"color\", type = \"lower\", col.lim = c(0, 1),   is.corr = FALSE, title = \"Partial Mom Diff from Complete\",   order = \"hclust\",   tl.pos = \"l\", tl.col = \"black\", tl.srt = 5, tl.cex = 0.2,   col = COL1(\"Reds\", 100), mar = c(0, 0, 2, 0) ) corrplot(as.matrix(fam1$ped_add_classic_complete - fam1$ped_add_classic_dad),   method = \"color\", type = \"lower\", col.lim = c(0, 1),   is.corr = FALSE, title = \"Classic Dad Diff from Complete\",   order = \"hclust\",   tl.pos = \"l\", tl.col = \"black\", tl.srt = 5, tl.cex = 0.2,   col = COL1(\"Reds\", 100), mar = c(0, 0, 2, 0) ) corrplot(as.matrix(fam1$ped_add_classic_complete - fam1$ped_add_partial_dad),   method = \"color\", type = \"lower\", col.lim = c(0, 1),   is.corr = FALSE, title = \"Partial Dad Diff from Complete\",   order = \"hclust\",   tl.pos = \"l\", tl.col = \"black\", tl.srt = 5, tl.cex = 0.2,   col = COL1(\"Reds\", 100), mar = c(0, 0, 2, 0) )"},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v3_analyticrelatedness.html","id":"summary","dir":"Articles","previous_headings":"Computing Relatedness from Pedigree Data","what":"Summary","title":"Understanding and Computing Relatedness from Pedigree Data","text":"Across families inbreeding dataset, results show consistent pattern: partial parent method outperforms classic method reconstructing additive genetic relationship matrix either mother father missing. make explicit, calculate RMSE difference methods. positive value means partial method lower RMSE (.e., better accuracy) classic method: can summarize pattern across families: families, RMSE_diff_mom RMSE_diff_dad positive—indicating classic method produces larger errors relative partial method. holds regardless whether missing parent mother father. verify directly: proportions show often partial method produces lower RMSE across dataset. confirms earlier findings: pedigree data incomplete, partial parent method faithfully reconstructs full-data relatedness matrix.","code":"results <- as.data.frame(results)  results$RMSE_diff_dad <- results$RMSE_classic_dad - results$RMSE_partial_dad results$RMSE_diff_mom <- results$RMSE_classic_mom - results$RMSE_partial_mom summary(dplyr::select(results, RMSE_diff_mom, RMSE_diff_dad)) #>  RMSE_diff_mom      RMSE_diff_dad      #>  Min.   :0.001222   Min.   :0.001222   #>  1st Qu.:0.001869   1st Qu.:0.002036   #>  Median :0.002538   Median :0.002520   #>  Mean   :0.005763   Mean   :0.005786   #>  3rd Qu.:0.005625   3rd Qu.:0.005625   #>  Max.   :0.024221   Max.   :0.024221 mean(results$RMSE_diff_mom > 0, na.rm = TRUE) #> [1] 1 mean(results$RMSE_diff_dad > 0, na.rm = TRUE) #> [1] 1 results |>   as.data.frame() |>   dplyr::select(     -famIDs, -RMSE_diff_mom, -RMSE_diff_dad, -max_R_classic_dad,     -max_R_partial_dad, -max_R_classic_mom, -max_R_partial_mom, -max_R_classic   ) |>   summary() #>  RMSE_partial_dad  RMSE_partial_mom  RMSE_classic_dad  RMSE_classic_mom  #>  Min.   :0.04773   Min.   :0.04773   Min.   :0.04895   Min.   :0.04895   #>  1st Qu.:0.05570   1st Qu.:0.05349   1st Qu.:0.05774   1st Qu.:0.05555   #>  Median :0.06206   Median :0.06899   Median :0.06457   Median :0.07158   #>  Mean   :0.07545   Mean   :0.07686   Mean   :0.08124   Mean   :0.08262   #>  3rd Qu.:0.08237   3rd Qu.:0.08323   3rd Qu.:0.08866   3rd Qu.:0.08866   #>  Max.   :0.15547   Max.   :0.15547   Max.   :0.17969   Max.   :0.17969"},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v4_validation.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Validating and Repairing Pedigree Data with BGmisc","text":"Working pedigree data often involves dealing inconsistencies, missing information, errors. BGmisc package provides tools identify , possible, repair issues automatically. vignette demonstrates validate clean pedigree data using BGmisc’s validation functions.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v4_validation.html","id":"identifying-and-repairing-id-issues","dir":"Articles","previous_headings":"","what":"Identifying and Repairing ID Issues","title":"Validating and Repairing Pedigree Data with BGmisc","text":"checkIDs() function detects two types common ID errors pedigree data: -row duplication: two individuals share ID Within-row duplication: individual’s parents’ IDs incorrectly listed ID problems especially common merging family records processing historical data. Let’s explore show — imply downstream structure.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v4_validation.html","id":"a-clean-dataset","dir":"Articles","previous_headings":"Identifying and Repairing ID Issues","what":"A Clean Dataset","title":"Validating and Repairing Pedigree Data with BGmisc","text":"’ll begin Potter family dataset, cleaned reformatted ped2fam(): duplicated self-referential IDs . things rarely stay simple.","code":"library(BGmisc)  # Load our example dataset df <- ped2fam(potter, famID = \"newFamID\", personID = \"personID\")  # Check for ID issues checkIDs(df, repair = FALSE) #> $all_unique_ids #> [1] TRUE #>  #> $total_non_unique_ids #> [1] 0 #>  #> $non_unique_ids #> NULL #>  #> $total_own_father #> [1] 0 #>  #> $total_own_mother #> [1] 0 #>  #> $total_duplicated_parents #> [1] 0 #>  #> $total_within_row_duplicates #> [1] 0 #>  #> $within_row_duplicates #> [1] FALSE #>  #> $is_own_father_ids #> NULL #>  #> $is_own_mother_ids #> NULL #>  #> $duplicated_parents_ids #> NULL"},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v4_validation.html","id":"what-checkids-reports","dir":"Articles","previous_headings":"Identifying and Repairing ID Issues > A Clean Dataset","what":"What checkIDs() Reports","title":"Validating and Repairing Pedigree Data with BGmisc","text":"checkIDs() function checks : Whether IDs unique (reported all_unique_ids, tells IDs dataset unique, total_non_unique_ids, gives count non-unique IDs found) Cases someone’s ID matches parent’s ID (shown total_own_father total_own_mother, count individuals whose father’s mother’s ID matches ID) Total duplicated parent IDs (tracked total_duplicated_parents, counts individuals duplicated parent IDs) Within-row duplicates (measured total_within_row_duplicates showing count within_row_duplicates indicating presence) set repair = TRUE, function attempt fix issues finds. ’ll explore later.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v4_validation.html","id":"a-tale-of-two-duplicates","dir":"Articles","previous_headings":"Identifying and Repairing ID Issues","what":"A Tale of Two Duplicates","title":"Validating and Repairing Pedigree Data with BGmisc","text":"understand tools work practice, let’s create dataset two common real-world problems. First, ’ll accidentally give Vernon Dursley ID sister Marjorie (common issue merging family records). , ’ll add complete duplicate Dudley Dursley (might happen data entry). look data using standard tools, problems aren’t immediately obvious: checkIDs() detects problems clearly: can see output, 4 non-unique IDs dataset, specifically 2, 6. Let’s take peek duplicates: Yep, definitely duplicates.","code":"# Create our problematic dataset df_duplicates <- df # Sibling ID conflict df_duplicates$personID[df_duplicates$name == \"Vernon Dursley\"] <-   df_duplicates$personID[df_duplicates$name == \"Marjorie Dursley\"] # Duplicate entry df_duplicates <- rbind(   df_duplicates,   df_duplicates[df_duplicates$name == \"Dudley Dursley\", ] ) library(tidyverse)  summarizeFamilies(df_duplicates,   famID = \"newFamID\",   personID = \"personID\" )$family_summary %>%   glimpse() #> Rows: 1 #> Columns: 17 #> $ newFamID        <dbl> 1 #> $ count           <int> 37 #> $ gen_mean        <dbl> 1.756757 #> $ gen_median      <dbl> 2 #> $ gen_min         <dbl> 0 #> $ gen_max         <dbl> 3 #> $ gen_sd          <dbl> 1.038305 #> $ spouseID_mean   <dbl> 38.2 #> $ spouseID_median <dbl> 15 #> $ spouseID_min    <dbl> 1 #> $ spouseID_max    <dbl> 106 #> $ spouseID_sd     <dbl> 44.15118 #> $ sex_mean        <dbl> 0.5135135 #> $ sex_median      <dbl> 1 #> $ sex_min         <dbl> 0 #> $ sex_max         <dbl> 1 #> $ sex_sd          <dbl> 0.5067117 # Identify duplicates result <- checkIDs(df_duplicates) print(result) #> $all_unique_ids #> [1] FALSE #>  #> $total_non_unique_ids #> [1] 4 #>  #> $non_unique_ids #> [1] 2 6 #>  #> $total_own_father #> [1] 0 #>  #> $total_own_mother #> [1] 0 #>  #> $total_duplicated_parents #> [1] 0 #>  #> $total_within_row_duplicates #> [1] 0 #>  #> $within_row_duplicates #> [1] FALSE #>  #> $is_own_father_ids #> NULL #>  #> $is_own_mother_ids #> NULL #>  #> $duplicated_parents_ids #> NULL # Let's examine the problematic entries df_duplicates %>%   filter(personID %in% result$non_unique_ids) %>%   arrange(personID) #>    personID newFamID famID             name gen momID dadID spouseID sex #> 1         2        1     1   Vernon Dursley   1   101   102        3   1 #> 2         2        1     1 Marjorie Dursley   1   101   102       NA   0 #> 6         6        1     1   Dudley Dursley   2     3     1       NA   1 #> 61        6        1     1   Dudley Dursley   2     3     1       NA   1"},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v4_validation.html","id":"repairing-between-row-duplicates","dir":"Articles","previous_headings":"Identifying and Repairing ID Issues > A Tale of Two Duplicates","what":"Repairing Between-Row Duplicates","title":"Validating and Repairing Pedigree Data with BGmisc","text":"ID issues can fixed automatically. Let’s try repair option: Great! Notice happened : function able repair full duplicate, without manual intervention. still leaves us sibling ID conflict, ’s complex issue require manual intervention. ’ll leave now. far ’ve checked violations uniqueness. errors also affect graph structure? Let’s find .","code":"df_repair <- checkIDs(df, repair = TRUE)  df_repair %>%   filter(ID %in% result$non_unique_ids) %>%   arrange(ID) #>   ID newFamID famID             name gen momID dadID spID sex #> 1  2        1     1 Marjorie Dursley   1   101   102   NA   0 #> 2  6        1     1   Dudley Dursley   2     3     1   NA   1  result <- checkIDs(df_repair)  print(result) #> $all_unique_ids #> [1] TRUE #>  #> $total_non_unique_ids #> [1] 0 #>  #> $non_unique_ids #> NULL #>  #> $total_own_father #> [1] 0 #>  #> $total_own_mother #> [1] 0 #>  #> $total_duplicated_parents #> [1] 0 #>  #> $total_within_row_duplicates #> [1] 0 #>  #> $within_row_duplicates #> [1] FALSE #>  #> $is_own_father_ids #> NULL #>  #> $is_own_mother_ids #> NULL #>  #> $duplicated_parents_ids #> NULL"},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v4_validation.html","id":"oedipus-id","dir":"Articles","previous_headings":"Identifying and Repairing ID Issues","what":"Oedipus ID","title":"Validating and Repairing Pedigree Data with BGmisc","text":"Just Oedipus discovered true relationship records suggested, data can reveal confused parentage ID incorrectly listed parent. Let’s examine error: Sometimes, individual’s parents’ IDs may incorrectly listed ID, leading within-row duplicates. checkIDs function can also identify errors: example, created within-row duplicate setting momID Vernon Dursley ID. checkIDs function correctly identifies error present. repair within-row duplicates, able set repair argument TRUE, eventually. feature currently development available future versions package. meantime, can manually inspect correct errors dataset. several ways correct issue, depending specifics dataset. case, correct momID Vernon Dursley correct value, resolving within-row duplicate, likely assuming sister Marjorie shares mother.","code":"# Create a sample dataset with within-person duplicate parent IDs  df_within <- ped2fam(potter, famID = \"newFamID\", personID = \"personID\")  df_within$momID[df_within$name == \"Vernon Dursley\"] <- df_within$personID[df_within$name == \"Vernon Dursley\"]  # Check for within-row duplicates result <- checkIDs(df_within, repair = FALSE) print(result) #> $all_unique_ids #> [1] TRUE #>  #> $total_non_unique_ids #> [1] 0 #>  #> $non_unique_ids #> NULL #>  #> $total_own_father #> [1] 0 #>  #> $total_own_mother #> [1] 1 #>  #> $total_duplicated_parents #> [1] 0 #>  #> $total_within_row_duplicates #> [1] 1 #>  #> $within_row_duplicates #> [1] TRUE #>  #> $is_own_father_ids #> NULL #>  #> $is_own_mother_ids #> [1] 1 #>  #> $duplicated_parents_ids #> NULL # Find the problematic entry  df_within[df_within$momID %in% result$is_own_mother_ids, ] #>   personID newFamID famID           name gen momID dadID spouseID sex #> 1        1        1     1 Vernon Dursley   1     1   102        3   1"},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v4_validation.html","id":"identifying-and-repairing-sex-coding-issues","dir":"Articles","previous_headings":"","what":"Identifying and Repairing Sex Coding Issues","title":"Validating and Repairing Pedigree Data with BGmisc","text":"Another critical aspect pedigree validation ensuring consistency sex coding. brings us important distinction genetic studies biological sex (genotype) gender identity (phenotype): Biological sex (genotype) refers individual’s chromosomal configuration, typically XX female XY male humans, though variations exist. Gender identity (phenotype) encompasses broader, richer, personal, deeply-held sense male, female, blend , neither, another gender entirely. checkSex function focuses biological sex coding consistency, particularly looking : - Mismatches parent roles recorded sex - Individuals listed parent child - Inconsistent sex coding across dataset Let’s examine works: inconsistencies found, can attempt automatic repair: repair argument set TRUE, repair process follows several rules: - Parents listed mothers must female - Parents listed fathers must male - Sex codes standardized specified code_male code_female values - sex code provided, function attempt infer male female coded . frequently assigned sex mothers fathers used standard. Note automatic repairs carefully reviewed, may always reflect correct biological relationships. cases sex coding ambiguous conflicts known relationships, manual inspection domain knowledge may required.","code":"# Validate sex coding  results <- checkSex(potter,   code_male = 1,   code_female = 0,   verbose = TRUE, repair = FALSE ) #> Standardizing column names... #> Step 1: Checking how many sexes/genders... #> 2  unique sex codes found:  1, 0  #> Role: dadID #> 1  unique sex codes found:  1  #> Modal sex code:  1  #> All parents consistently coded. #> Role: momID #> 1  unique sex codes found:  0  #> Modal sex code:  0  #> All parents consistently coded. #> Checks Made: #> c(1, 0)21010numeric(0)numeric(0)numeric(0)numeric(0) print(results) #> $sex_unique #> [1] 1 0 #>  #> $sex_length #> [1] 2 #>  #> $all_sex_dad #> [1] 1 #>  #> $all_sex_mom #> [1] 0 #>  #> $most_frequent_sex_dad #> [1] 1 #>  #> $most_frequent_sex_mom #> [1] 0 #>  #> $ID_female_dads #> numeric(0) #>  #> $ID_child_female_dads #> numeric(0) #>  #> $ID_male_moms #> numeric(0) #>  #> $ID_child_male_moms #> numeric(0) # Repair sex coding df_fix <- checkSex(potter,   code_male = 1,   code_female = 0,   verbose = TRUE, repair = TRUE ) #> Standardizing column names... #> Step 1: Checking how many sexes/genders... #> 2  unique sex codes found:  1, 0  #> Role: dadID #> 1  unique sex codes found:  1  #> Modal sex code:  1  #> All parents consistently coded. #> Role: momID #> 1  unique sex codes found:  0  #> Modal sex code:  0  #> All parents consistently coded. #> Step 2: Attempting to repair sex coding... #> Changes Made: #> Recode sex based on most frequent sex in dads: 1. Total sex changes made:  36 print(df_fix) #>     ID famID               name gen momID dadID spID sex #> 1    1     1     Vernon Dursley   1   101   102    3   M #> 2    2     1   Marjorie Dursley   1   101   102   NA   F #> 3    3     1      Petunia Evans   1   103   104    1   F #> 4    4     1         Lily Evans   1   103   104    5   F #> 5    5     1       James Potter   1    NA    NA    4   M #> 6    6     1     Dudley Dursley   2     3     1   NA   M #> 7    7     1       Harry Potter   2     4     5    8   M #> 8    8     1      Ginny Weasley   2    10     9    7   F #> 9    9     1     Arthur Weasley   1    NA    NA   10   M #> 10  10     1      Molly Prewett   1    NA    NA    9   F #> 11  11     1        Ron Weasley   2    10     9   17   M #> 12  12     1       Fred Weasley   2    10     9   NA   M #> 13  13     1     George Weasley   2    10     9   NA   M #> 14  14     1      Percy Weasley   2    10     9   20   M #> 15  15     1    Charlie Weasley   2    10     9   NA   M #> 16  16     1       Bill Weasley   2    10     9   18   M #> 17  17     1   Hermione Granger   2    NA    NA   11   F #> 18  18     1     Fleur Delacour   2   105   106   16   F #> 19  19     1 Gabrielle Delacour   2   105   106   NA   F #> 20  20     1     Audrey UNKNOWN   2    NA    NA   14   F #> 21  21     1    James Potter II   3     8     7   NA   M #> 22  22     1       Albus Potter   3     8     7   NA   M #> 23  23     1        Lily Potter   3     8     7   NA   F #> 24  24     1       Rose Weasley   3    17    11   NA   F #> 25  25     1       Hugo Weasley   3    17    11   NA   M #> 26  26     1   Victoire Weasley   3    18    16   NA   F #> 27  27     1  Dominique Weasley   3    18    16   NA   F #> 28  28     1      Louis Weasley   3    18    16   NA   M #> 29  29     1      Molly Weasley   3    20    14   NA   F #> 30  30     1       Lucy Weasley   3    20    14   NA   F #> 31 101     1     Mother Dursley   0    NA    NA  102   F #> 32 102     1     Father Dursley   0    NA    NA  101   M #> 33 104     1       Father Evans   0    NA    NA  103   M #> 34 103     1       Mother Evans   0    NA    NA  104   F #> 35 106     1    Father Delacour   0    NA    NA  105   M #> 36 105     1    Mother Delacour   0    NA    NA  106   F"},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v4_validation.html","id":"best-practices-for-pedigree-validation","dir":"Articles","previous_headings":"","what":"Best Practices for Pedigree Validation","title":"Validating and Repairing Pedigree Data with BGmisc","text":"extensive work pedigree data, ’ve learned several key principles: Always inspect data applying automatic repairs Use summarizeFamilies() get overview family structures Keep detailed records changes made cleaning Validate repair step Create backups applying repairs Trust domain knowledge - automatic repairs helpful infallible following best practices, leveraging functions like checkIDs, checkSex, recodeSex, can ensure integrity pedigree data, facilitating accurate analysis research.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v5_ASOIAF.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"ASOIAF: How related are Jon and Danny?","text":"Just closely related Jon Snow Daenerys Targaryen? According lore Song Ice Fire, Daenerys Jon’s paternal aunt. suggest theoretical genetic relatedness 0.25, assuming simple pedigree inbreeding. tangled ancestries potentially missing information, confident can estimate? vignette, use BGmisc package reconstruct ASOIAF pedigree, handle incomplete parentage data, compute additive genetic common nuclear relatedness. ’ll focus Jon Daenerys case study, methods generalize characters provided dataset.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v5_ASOIAF.html","id":"load-packages-and-data","dir":"Articles","previous_headings":"","what":"Load Packages and Data","title":"ASOIAF: How related are Jon and Danny?","text":"begin loading required libraries examining structure built-ASOIAF pedigree. ASOIAF dataset includes character IDs, names, family identifiers, parent identifiers subset characters drawn Song Ice Fire canon.","code":"library(BGmisc) library(tidyverse) library(ggpedigree) data(ASOIAF) head(ASOIAF) ##   id famID momID dadID          name sex ## 1  1     1    NA    NA   Walder Frey   M ## 2  2     1    NA    NA   Perra Royce   F ## 3  3     1     2     1  Stevron Frey   M ## 4  4     1     2     1    Emmon Frey   M ## 5  5     1     2     1    Aenys Frey   M ## 6  6     1    NA    NA Corenna Swann   F"},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v5_ASOIAF.html","id":"prepare-and-validate-sex-codes","dir":"Articles","previous_headings":"","what":"Prepare and Validate Sex Codes","title":"ASOIAF: How related are Jon and Danny?","text":"Many pedigree-based algorithms rely biological sex downstream calculationss visualization. use checkSex() inspect sex variable, repairing inconsistencies programmatically.","code":"df_got <- checkSex(ASOIAF,   code_male = 1,   code_female = 0,   verbose = FALSE, repair = TRUE )"},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v5_ASOIAF.html","id":"compute-relatedness-matrices","dir":"Articles","previous_headings":"","what":"Compute Relatedness Matrices","title":"ASOIAF: How related are Jon and Danny?","text":"validated pedigree data, can now compute two distinct relationship matrices: Additive genetic relatedness (add): Proportion shared additive genetic variance individuals. Common nuclear relatedness (cn): Indicates shared full-sibling (nuclear family) environments. derived using ped2add() ped2cn(), respectively. functions rely internal graph traversal adjacency structures. case: specify isChild_method = “partialparent” allow inclusion dyads one parent unknown. choose adjacency_method = “direct” additive matrix optimize computational speed. common nuclear matrix, use adjacency_method = “indexed”, slower necessary resolving sibling-group structures. set sparse = FALSE return full (dense) matrices rather compressed sparse formats.","code":"add <- ped2com(df_got,   isChild_method = \"partialparent\",   component = \"additive\",   adjacency_method = \"direct\",   sparse = TRUE )  mt <- ped2com(df_got,   isChild_method = \"partialparent\",   component = \"mitochondrial\",   adjacency_method = \"direct\",   sparse = TRUE )  cn <- ped2cn(df_got,   isChild_method = \"partialparent\",   adjacency_method = \"indexed\",   sparse = TRUE )"},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v5_ASOIAF.html","id":"convert-to-pairwise-format","dir":"Articles","previous_headings":"","what":"Convert to Pairwise Format","title":"ASOIAF: How related are Jon and Danny?","text":"interpretability, convert square matrices long-format tables using com2links(). function returns dataframe row represents unique pair individuals, including additive common nuclear coefficients. function can return entire matrix just lower triangular part, often sufficient purposes. Setting drop_upper_triangular = TRUE ensures retain one entry per dyad, since matrices symmetric. also keep data memory setting writetodisk = FALSE.","code":"df_links <- com2links(   writetodisk = FALSE,   ad_ped_matrix = add, cn_ped_matrix = cn, mit_ped_matrix = mt,   drop_upper_triangular = TRUE ) # %>% #  filter(ID1 != ID2)"},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v5_ASOIAF.html","id":"locate-jon-and-daenerys","dir":"Articles","previous_headings":"","what":"Locate Jon and Daenerys","title":"ASOIAF: How related are Jon and Danny?","text":"next identify rows pairwise relatedness table correspond Jon Snow Daenerys Targaryen. First, retrieve individual IDs: isolate dyad: table contains additive nuclear relatedness estimates Jon Daenerys. pedigree reflects canonical aunt-nephew relationship free inbreeding, ’d expect see additive coefficient close 0.25. However, value 0.3127441, indicating complex relationship.","code":"# Find the IDs of Jon Snow and Daenerys Targaryen  jon_id <- df_got %>%   filter(name == \"Jon Snow\") %>%   pull(ID)  dany_id <- df_got %>%   filter(name == \"Daenerys Targaryen\") %>%   pull(ID) jon_dany_row <- df_links %>%   filter(ID1 == jon_id | ID2 == jon_id) %>%   filter(ID1 %in% dany_id | ID2 %in% dany_id)  jon_dany_row ##   ID1 ID2     addRel mitRel cnuRel ## 1 206 211 0.31274414      0      0 ## 2 211 304 0.01953125      0      0"},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v5_ASOIAF.html","id":"plotting-the-pedigree-with-incomplete-parental-information","dir":"Articles","previous_headings":"","what":"Plotting the Pedigree with Incomplete Parental Information","title":"ASOIAF: How related are Jon and Danny?","text":"Many real-world fictional pedigrees contain individuals unknown partially known parentage. cases, plotting tools typically fail unless gaps handled. use checkParentIDs() : Identify individuals one known parent one missing Create “phantom” placeholders missing parent -Optionally repair harmonize parent fields facilitate plotting, check individuals one known parent missing . cases, assign placeholder ID missing parent. code creates new IDs individuals one known parent missing . checks either momID dadID missing, , assigns new ID based row number. allows us visualize pedigree even parental information incomplete.","code":"df_repaired <- checkParentIDs(df_got,   addphantoms = TRUE,   repair = TRUE,   parentswithoutrow = FALSE,   repairsex = FALSE ) %>% mutate(   famID = 1,   affected = case_when(     ID %in% c(jon_id, dany_id, \"365\") ~ 1,     TRUE ~ 0   ) ) ## REPAIR IN EARLY ALPHA"},{"path":[]},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v5_ASOIAF.html","id":"plotting-the-pedigree-with-kinship2plot-pedigree","dir":"Articles","previous_headings":"Visualize the Pedigree","what":"Plotting the Pedigree with kinship2::plot.pedigree()","title":"ASOIAF: How related are Jon and Danny?","text":"can now visualize repaired pedigree using plotPedigree() function. function generates plot pedigree, individuals colored based affected status. case, highlight Jon Daenerys “affected” individuals. Otherwise difficult distinguish rest pedigree.","code":"plotPedigree(df_repaired, affected = df_repaired$affected, verbose = FALSE) ## Did not plot the following people: 85 88 125 142 228 229 258 259 274 275 305 336 357 381 388 405 409 418 420 424 428 451 487 ## named list()"},{"path":"https://r-computing-lab.github.io/BGmisc/articles/v5_ASOIAF.html","id":"visualize-the-pedigree-with-ggpedigree","dir":"Articles","previous_headings":"","what":"Visualize the Pedigree with ggPedigree()","title":"ASOIAF: How related are Jon and Danny?","text":"pedigree, using ggPedigree() {ggpedigree}. function provides flexible customizable way visualize pedigrees, allowing easy integration ggplot2 functions.","code":"library(ggpedigree) plt <- ggPedigree(df_repaired,   status_col = \"affected\",   personID = \"ID\",   config = list(     status_unaffected_lab = 0,     sex_color = TRUE,     code_male = \"M\",     status_affected_lab = 1,     affected_shape = 4,     ped_width = 14,     include_tooltips = TRUE,     label_nudge_y = -.25,     include_labels = TRUE,     label_method = \"geom_text\",     segment_self_color = \"purple\",     tooltip_cols = c(\"name\")   ) )  plt +   theme(legend.position = \"none\") +   labs(title = \"ASOIAF Pedigree: Jon Snow and Daenerys Targaryen\")"},{"path":"https://r-computing-lab.github.io/BGmisc/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"S. Mason Garrison. Author, maintainer. Michael D. Hunter. Author. Xuanyu Lyu. Author. Rachel N. Good. Contributor. Jonathan D. Trattner. Author.            https://www.jdtrat.com/ S. Alexandra Burt. Author.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Garrison, S. Mason, Hunter, Michael D., Lyu, Xuanyu, Trattner, Jonathan D., Burt, S. Alexandra (2024). “BGmisc: R Package Extended Behavior Genetics Analysis.” Journal Open Source Software, 9(94). doi:10.21105/joss.06203.","code":"@Article{bgmisc,   title = {BGmisc: An R Package for Extended Behavior Genetics Analysis},   author = {{Garrison, S. Mason} and {Hunter, Michael D.} and {Lyu, Xuanyu} and {Trattner, Jonathan D.} and {Burt, S. Alexandra}},   journal = {Journal of Open Source Software},   year = {2024},   volume = {9},   number = {94},   doi = {10.21105/joss.06203}, }"},{"path":"https://r-computing-lab.github.io/BGmisc/index.html","id":"bgmisc","dir":"","previous_headings":"","what":"An R Package for Extended Behavior Genetics Analysis","title":"An R Package for Extended Behavior Genetics Analysis","text":"BGmisc R package offers comprehensive suite functions tailored extended behavior genetics analysis, including model identification, calculating relatedness, pedigree conversion, pedigree simulation, .","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An R Package for Extended Behavior Genetics Analysis","text":"can install released version BGmisc CRAN : install development version BGmisc GitHub use:","code":"install.packages(\"BGmisc\") # install.packages(\"devtools\") devtools::install_github(\"R-Computing-Lab/BGmisc\")"},{"path":"https://r-computing-lab.github.io/BGmisc/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"An R Package for Extended Behavior Genetics Analysis","text":"use BGmisc research wish refer , please cite following paper: Garrison, S. Mason, Hunter, Michael D., Lyu, Xuanyu, Trattner, Jonathan D., Burt, S. Alexandra (2024). “BGmisc: R Package Extended Behavior Genetics Analysis.” Journal Open Source Software, 9(94). doi:10.21105/joss.06203 https://doi.org/10.21105/joss.06203. BibTeX entry LaTeX users ","code":"citation(package = \"BGmisc\") @Article{bgmisc,   title = {BGmisc: An R Package for Extended Behavior Genetics Analysis},   author = {{Garrison, S. Mason} and {Hunter, Michael D.} and {Lyu, Xuanyu} and {Trattner, Jonathan D.} and {Burt, S. Alexandra}},   journal = {Journal of Open Source Software},   year = {2024},   volume = {9},   number = {94},   doi = {10.21105/joss.06203}, }"},{"path":"https://r-computing-lab.github.io/BGmisc/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"An R Package for Extended Behavior Genetics Analysis","text":"Contributions BGmisc project welcome. guidelines contribute, please refer Contributing Guidelines. Issues pull requests submitted GitHub repository. support, please use GitHub issues page.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/index.html","id":"branching-and-versioning-system","dir":"","previous_headings":"Contributing","what":"Branching and Versioning System","title":"An R Package for Extended Behavior Genetics Analysis","text":"development BGmisc follows GitFlow branching strategy: Feature Branches: major changes new features developed separate branches created dev_main branch. Name branches according feature change meant address. dev_main: branch final integration stage changes merged main branch. considered stable, well-tested features updates ready next release cycle merged . dev: branch serves less stable, active development environment. Feature branches merged . Changes fluid branch higher risk breaking. Main Branch (main): main branch mirrors stable state project seen CRAN. fully tested approved changes dev_main branch merged main prepare new release.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"An R Package for Extended Behavior Genetics Analysis","text":"BGmisc licensed GNU General Public License v3.0. details, see LICENSE.md file.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ASOIAF.html","id":null,"dir":"Reference","previous_headings":"","what":"A song of ice and fire pedigree data — ASOIAF","title":"A song of ice and fire pedigree data — ASOIAF","text":"dataset created Song Ice Fire series George R. R. Martin. Core data [Westeros.org forum](https://asoiaf.westeros.org/index.php?/topic/88863---family-trees/).","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ASOIAF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A song of ice and fire pedigree data — ASOIAF","text":"","code":"data(ASOIAF)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ASOIAF.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A song of ice and fire pedigree data — ASOIAF","text":"data frame 501 observations","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ASOIAF.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A song of ice and fire pedigree data — ASOIAF","text":"variables follows: id:  Person identification variable momID:  ID mother dadID:  ID father name:  Name person sex: Biological sex","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/BGmisc-package.html","id":null,"dir":"Reference","previous_headings":"","what":"BGmisc: An R Package for Extended Behavior Genetics Analysis — BGmisc-package","title":"BGmisc: An R Package for Extended Behavior Genetics Analysis — BGmisc-package","text":"Provides functions behavior genetics analysis, including variance component model identification [Hunter et al. (2021) doi:10.1007/s10519-021-10055-x ], calculation relatedness coefficients using path-tracing methods [Wright (1922) doi:10.1086/279872 ; McArdle & McDonald (1984) doi:10.1111/j.2044-8317.1984.tb00802.x ], inference relatedness, pedigree conversion, simulation multi-generational family data [Lyu et al. (2024) doi:10.1101/2024.12.19.629449 ]. full overview, see Garrison et al. (2024) doi:10.21105/joss.06203 .","code":""},{"path":[]},{"path":"https://r-computing-lab.github.io/BGmisc/reference/BGmisc-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"BGmisc: An R Package for Extended Behavior Genetics Analysis — BGmisc-package","text":"Maintainer: S. Mason Garrison garrissm@wfu.edu (ORCID) Authors: Michael D. Hunter (ORCID) Xuanyu Lyu (ORCID) Jonathan D. Trattner code@jdtrat.com (ORCID) (https://www.jdtrat.com/) S. Alexandra Burt (ORCID) contributors: Rachel N. Good [contributor]","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/Null.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the null space of a matrix — Null","title":"Compute the null space of a matrix — Null","text":"Compute null space matrix","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/Null.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the null space of a matrix — Null","text":"","code":"Null(M)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/Null.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the null space of a matrix — Null","text":"M matrix null space desired","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/Null.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the null space of a matrix — Null","text":"method uses QR factorization determine basis null space matrix.  sometimes also called orthogonal complement matrix.  implemented, function identical function name MASS package.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/addParentRow.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a properly formatted parent row for the pedigree — addParentRow","title":"Create a properly formatted parent row for the pedigree — addParentRow","text":"Create properly formatted parent row pedigree","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/addParentRow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a properly formatted parent row for the pedigree — addParentRow","text":"","code":"addParentRow(template_row, new_id, sex, momID = NA, dadID = NA)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/addParentRow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a properly formatted parent row for the pedigree — addParentRow","text":"template_row single row ped, used template column structure new_id new parent's ID sex new parent's sex value (e.g., 0 female, 1 male, \"F\"/\"M\") momID new parent's mother ID (default NA) dadID new parent's father ID (default NA)","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/addParentRow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a properly formatted parent row for the pedigree — addParentRow","text":"single-row dataframe new parent","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/addRowlessParents.html","id":null,"dir":"Reference","previous_headings":"","what":"Add addRowlessParents — addRowlessParents","title":"Add addRowlessParents — addRowlessParents","text":"function adds parents appear momID dadID missing ID","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/addRowlessParents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add addRowlessParents — addRowlessParents","text":"","code":"addRowlessParents(ped, verbose, validation_results)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/addRowlessParents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add addRowlessParents — addRowlessParents","text":"ped dataframe representing pedigree data columns 'ID', 'dadID', 'momID'. verbose logical flag indicating whether print progress validation messages console. validation_results validation results","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/adjustKidsPerCouple.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate or Adjust Number of Kids per Couple Based on Mating Rate — adjustKidsPerCouple","title":"Generate or Adjust Number of Kids per Couple Based on Mating Rate — adjustKidsPerCouple","text":"function generates adjusts number kids per couple generation based specified average whether count randomly determined.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/adjustKidsPerCouple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate or Adjust Number of Kids per Couple Based on Mating Rate — adjustKidsPerCouple","text":"","code":"adjustKidsPerCouple(nMates, kpc, rd_kpc)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/adjustKidsPerCouple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate or Adjust Number of Kids per Couple Based on Mating Rate — adjustKidsPerCouple","text":"nMates Integer, number mated pairs generation. kpc Number kids per couple. integer >= 2 determines many kids fertilized mated couple pedigree. Default value 3. Returns error kpc equals 1. rd_kpc logical. TRUE, number kids per mate randomly generated poisson distribution mean kpc. FALSE, number kids per mate fixed kpc.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/adjustKidsPerCouple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate or Adjust Number of Kids per Couple Based on Mating Rate — adjustKidsPerCouple","text":"numeric vector generated adjusted number kids per couple.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/applyTagMappings.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply Tag Mappings to a Line — applyTagMappings","title":"Apply Tag Mappings to a Line — applyTagMappings","text":"Iterates list tag mappings , tag matches line, updates record.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/applyTagMappings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply Tag Mappings to a Line — applyTagMappings","text":"","code":"applyTagMappings(line, record, pattern_rows, tag_mappings)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/applyTagMappings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply Tag Mappings to a Line — applyTagMappings","text":"line character string GEDCOM file. record named list representing individual's record. pattern_rows list GEDCOM tag counts. tag_mappings list lists. sublist define: - tag: GEDCOM tag, - field: record field update, - mode: either \"replace\" \"append\", - extractor: (optional) custom extraction function.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/applyTagMappings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply Tag Mappings to a Line — applyTagMappings","text":"list updated record (record) logical flag (matched).","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/assignCoupleIDs.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign Couple IDs — assignCoupleIDs","title":"Assign Couple IDs — assignCoupleIDs","text":"subfunction assigns unique couple ID mated pair generation. Unmated individuals assigned NA couple ID.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/assignCoupleIDs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign Couple IDs — assignCoupleIDs","text":"","code":"assignCoupleIDs(df_Ngen)  assignCoupleIds(df_Ngen)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/assignCoupleIDs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign Couple IDs — assignCoupleIDs","text":"df_Ngen dataframe current generation, including columns individual IDs spouse IDs.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/assignCoupleIDs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign Couple IDs — assignCoupleIDs","text":"input dataframe augmented 'coupleId' column, mated pair unique identifier.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/buildBetweenGenerations.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Generation Connections — buildBetweenGenerations","title":"Process Generation Connections — buildBetweenGenerations","text":"function processes connections two generations pedigree simulation. marks individuals parents, sons, daughters based generational position relationships. function also handles assignment couple IDs, manages single coupled individuals, establishes parent-offspring links across generations.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/buildBetweenGenerations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Generation Connections — buildBetweenGenerations","text":"","code":"buildBetweenGenerations(   df_Fam,   Ngen,   sizeGens,   verbose = FALSE,   marR,   sexR,   kpc,   rd_kpc )"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/buildBetweenGenerations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Generation Connections — buildBetweenGenerations","text":"df_Fam data frame containing simulated pedigree information current generation. Must include columns family ID, individual ID, generation number, spouse ID (spID), sex. data frame updated place include flags parental status (ifparent), son status (ifson), daughter status (ifdau), well couple IDs. Ngen Number generations. integer >= 2 determines many generations simulated pedigree . first generation always fertilized couple. last generation mated individuals. sizeGens numeric vector containing sizes generation within pedigree. verbose logical  TRUE, message progress stages algorithm marR Mating rate. numeric value ranging 0 1 determines proportion mated (fertilized) couples pedigree within generation. instance, marR = 0.5 suggests 50 percent offspring specific generation mated offspring. sexR Sex ratio offspring. numeric value ranging 0 1 determines proportion males offspring pedigree. instance, 0.4 means 40 percent offspring male. kpc Number kids per couple. integer >= 2 determines many kids fertilized mated couple pedigree. Default value 3. Returns error kpc equals 1. rd_kpc logical. TRUE, number kids per mate randomly generated poisson distribution mean kpc. FALSE, number kids per mate fixed kpc.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/buildBetweenGenerations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Generation Connections — buildBetweenGenerations","text":"function updates `df_Fam` data frame place, adding modifying columns related parental offspring status,         well assigning unique couple IDs. return value explicitly.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/buildBetweenGenerations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process Generation Connections — buildBetweenGenerations","text":"function iterates generation, starting second, establish connections based mating parentage. first generation, sets parental status directly. subsequent generations, calculates number couples, expected number offspring, assigns offspring parents. handles gender-based assignments sons daughters, deals nuances single individuals couple formation. function relies external functions `assignCoupleIds` `adjustKidsPerCouple` handle specific tasks related couple ID assignment offspring number adjustments, respectively.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/buildTreeGrid.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse Tree — buildTreeGrid","title":"Parse Tree — buildTreeGrid","text":"Parse Tree","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/buildTreeGrid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse Tree — buildTreeGrid","text":"","code":"buildTreeGrid(tree_lines)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/buildTreeGrid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse Tree — buildTreeGrid","text":"tree_lines character vector containing lines tree structure.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/buildTreeGrid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse Tree — buildTreeGrid","text":"data frame containing tree structure.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/buildWithinGenerations.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Generations for Pedigree Simulation — buildWithinGenerations","title":"Process Generations for Pedigree Simulation — buildWithinGenerations","text":"function iterates generations pedigree simulation, assigning IDs, creating data frames, determining sexes, managing pairing within generation.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/buildWithinGenerations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Generations for Pedigree Simulation — buildWithinGenerations","text":"","code":"buildWithinGenerations(sizeGens, marR, sexR, Ngen, verbose = FALSE)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/buildWithinGenerations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Generations for Pedigree Simulation — buildWithinGenerations","text":"sizeGens numeric vector containing sizes generation within pedigree. marR Mating rate. numeric value ranging 0 1 determines proportion mated (fertilized) couples pedigree within generation. instance, marR = 0.5 suggests 50 percent offspring specific generation mated offspring. sexR Sex ratio offspring. numeric value ranging 0 1 determines proportion males offspring pedigree. instance, 0.4 means 40 percent offspring male. Ngen Number generations. integer >= 2 determines many generations simulated pedigree . first generation always fertilized couple. last generation mated individuals. verbose logical  TRUE, message progress stages algorithm","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/buildWithinGenerations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Generations for Pedigree Simulation — buildWithinGenerations","text":"data frame representing simulated pedigree, including columns family ID (`fam`),","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/calcAllGens.html","id":null,"dir":"Reference","previous_headings":"","what":"calcAllGens A function to calculate the number of individuals in each generation. This is a supporting function for simulatePedigree. — calcAllGens","title":"calcAllGens A function to calculate the number of individuals in each generation. This is a supporting function for simulatePedigree. — calcAllGens","text":"calcAllGens function calculate number individuals generation. supporting function simulatePedigree.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/calcAllGens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calcAllGens A function to calculate the number of individuals in each generation. This is a supporting function for simulatePedigree. — calcAllGens","text":"","code":"calcAllGens(kpc, Ngen, marR)  allGens(kpc, Ngen, marR)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/calcAllGens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calcAllGens A function to calculate the number of individuals in each generation. This is a supporting function for simulatePedigree. — calcAllGens","text":"kpc Number kids per couple (integer >= 2). Ngen Number generations (integer >= 1). marR Mating rate (numeric value ranging 0 1).","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/calcAllGens.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calcAllGens A function to calculate the number of individuals in each generation. This is a supporting function for simulatePedigree. — calcAllGens","text":"Returns vector containing number individuals every generation.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/calcFamilySize.html","id":null,"dir":"Reference","previous_headings":"","what":"calcFamilySize A function to calculate the total number of individuals in a pedigree given parameters. This is a supporting function for function simulatePedigree — calcFamilySize","title":"calcFamilySize A function to calculate the total number of individuals in a pedigree given parameters. This is a supporting function for function simulatePedigree — calcFamilySize","text":"calcFamilySize function calculate total number individuals pedigree given parameters. supporting function function simulatePedigree","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/calcFamilySize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calcFamilySize A function to calculate the total number of individuals in a pedigree given parameters. This is a supporting function for function simulatePedigree — calcFamilySize","text":"","code":"calcFamilySize(kpc, Ngen, marR)  famSizeCal(kpc, Ngen, marR)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/calcFamilySize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calcFamilySize A function to calculate the total number of individuals in a pedigree given parameters. This is a supporting function for function simulatePedigree — calcFamilySize","text":"kpc Number kids per couple (integer >= 2). Ngen Number generations (integer >= 1). marR Mating rate (numeric value ranging 0 1).","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/calcFamilySize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calcFamilySize A function to calculate the total number of individuals in a pedigree given parameters. This is a supporting function for function simulatePedigree — calcFamilySize","text":"Returns numeric value indicating total pedigree size.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/calcFamilySizeByGen.html","id":null,"dir":"Reference","previous_headings":"","what":"calcFamilySizeByGen An internal supporting function for simulatePedigree. — calcFamilySizeByGen","title":"calcFamilySizeByGen An internal supporting function for simulatePedigree. — calcFamilySizeByGen","text":"calcFamilySizeByGen internal supporting function simulatePedigree.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/calcFamilySizeByGen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calcFamilySizeByGen An internal supporting function for simulatePedigree. — calcFamilySizeByGen","text":"","code":"calcFamilySizeByGen(kpc, Ngen, marR)  sizeAllGens(kpc, Ngen, marR)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/calcFamilySizeByGen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calcFamilySizeByGen An internal supporting function for simulatePedigree. — calcFamilySizeByGen","text":"kpc Number kids per couple (integer >= 2). Ngen Number generations (integer >= 1). marR Mating rate (numeric value ranging 0 1).","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/calcFamilySizeByGen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calcFamilySizeByGen An internal supporting function for simulatePedigree. — calcFamilySizeByGen","text":"Returns vector including number individuals every generation.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/calculateH.html","id":null,"dir":"Reference","previous_headings":"","what":"Falconer's Formula — calculateH","title":"Falconer's Formula — calculateH","text":"Use Falconer's formula solve H using observed correlations two groups two levels relatednesses.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/calculateH.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Falconer's Formula — calculateH","text":"","code":"calculateH(r1, r2, obsR1, obsR2)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/calculateH.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Falconer's Formula — calculateH","text":"r1 Relatedness coefficient first group. r2 Relatedness coefficient second group. obsR1 Observed correlation members first group. obsR2 Observed correlation members second group.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/calculateH.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Falconer's Formula — calculateH","text":"Heritability estimates (`heritability_estimates`).","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/calculateH.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Falconer's Formula — calculateH","text":"generalization Falconer's formula provides method calculate heritability using observed correlations two groups two relatednesses. function solves H using formula: $$H^2 = \\frac{obsR1 - obsR2}{r1 - r2}$$ r1 r2 relatedness coefficients first second group, respectively, obsR1 obsR2 observed correlations.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/calculateRelatedness.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Relatedness Coefficient — calculateRelatedness","title":"Calculate Relatedness Coefficient — calculateRelatedness","text":"function calculates relatedness coefficient two individuals based shared ancestry, described Wright (1922).","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/calculateRelatedness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Relatedness Coefficient — calculateRelatedness","text":"","code":"calculateRelatedness(   generations = 2,   path = NULL,   full = TRUE,   maternal = FALSE,   empirical = FALSE,   segregating = TRUE,   total_a = 6800 * 1e+06,   total_m = 16500,   weight_a = 1,   weight_m = 1,   denom_m = FALSE,   ... )  related_coef(...)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/calculateRelatedness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Relatedness Coefficient — calculateRelatedness","text":"generations Number generations back common ancestors pair share. path Traditional method count common ancestry, twice number generations removed common ancestors. provided, calculated 2*generations. full Logical. Indicates kin share parents common ancestor's generation. Default TRUE. maternal Logical. Indicates maternal lineage considered calculation. empirical Logical. Adjusts coefficient based empirical data, using total number nucleotides parameters. segregating Logical. Adjusts segregating genes. total_a Numeric. Represents total size autosomal genome terms nucleotides, used empirical adjustment. Default 6800*1000000. total_m Numeric. Represents total size mitochondrial genome terms nucleotides, used empirical adjustment. Default 16500. weight_a Numeric. Represents weight phenotypic influence additive genetic variance, used empirical adjustment. weight_m Numeric. Represents weight phenotypic influence mitochondrial effects, used empirical adjustment. denom_m Logical. Indicates `total_m` `weight_m` included denominator empirical adjustment calculation. ... named arguments may passed another function.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/calculateRelatedness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Relatedness Coefficient — calculateRelatedness","text":"Relatedness Coefficient (`coef`): measure genetic relationship two individuals.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/calculateRelatedness.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Relatedness Coefficient — calculateRelatedness","text":"relatedness coefficient two people (b & c) defined relation common ancestors: \\(r_{bc} = \\sum \\left(\\frac{1}{2}\\right)^{n+n'+1} (1+f_a)\\)","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/calculateRelatedness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Relatedness Coefficient — calculateRelatedness","text":"","code":"if (FALSE) { # \\dontrun{ # For full siblings, the relatedness coefficient is expected to be 0.5: calculateRelatedness(generations = 1, full = TRUE) # For half siblings, the relatedness coefficient is expected to be 0.25: calculateRelatedness(generations = 1, full = FALSE) } # }"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/calculateSummaryDT.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to calculate summary statistics for all numeric variables This function calculates summary statistics for all numeric variables in a data.table. It is supposed to be used internally by the summarize_pedigree function. — calculateSummaryDT","title":"Function to calculate summary statistics for all numeric variables This function calculates summary statistics for all numeric variables in a data.table. It is supposed to be used internally by the summarize_pedigree function. — calculateSummaryDT","text":"Function calculate summary statistics numeric variables function calculates summary statistics numeric variables data.table. supposed used internally summarize_pedigree function.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/calculateSummaryDT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to calculate summary statistics for all numeric variables This function calculates summary statistics for all numeric variables in a data.table. It is supposed to be used internally by the summarize_pedigree function. — calculateSummaryDT","text":"","code":"calculateSummaryDT(data, group_var, skip_var, five_num_summary = FALSE)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/calculateSummaryDT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to calculate summary statistics for all numeric variables This function calculates summary statistics for all numeric variables in a data.table. It is supposed to be used internally by the summarize_pedigree function. — calculateSummaryDT","text":"data data.table containing pedigree data. group_var character string specifying column name grouping variable. skip_var Character vector. Variables exclude summary calculations. five_num_summary Logical. `TRUE`, includes first quartile (Q1) third quartile (Q3) addition minimum, median, maximum values.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/calculateSummaryDT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to calculate summary statistics for all numeric variables This function calculates summary statistics for all numeric variables in a data.table. It is supposed to be used internally by the summarize_pedigree function. — calculateSummaryDT","text":"data.table containing summary statistics numeric variables.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/checkIDs.html","id":null,"dir":"Reference","previous_headings":"","what":"Validates and Optionally Repairs Unique IDs in a Pedigree Dataframe — checkIDs","title":"Validates and Optionally Repairs Unique IDs in a Pedigree Dataframe — checkIDs","text":"function takes pedigree object performs two main tasks: 1. Checks uniqueness individual IDs. 2. Optionally repairs non-unique IDs based specified logic.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/checkIDs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validates and Optionally Repairs Unique IDs in a Pedigree Dataframe — checkIDs","text":"","code":"checkIDs(ped, verbose = FALSE, repair = FALSE)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/checkIDs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validates and Optionally Repairs Unique IDs in a Pedigree Dataframe — checkIDs","text":"ped dataframe representing pedigree data columns `ID`, `dadID`, `momID`. verbose logical flag indicating whether print progress validation messages console. repair logical flag indicating whether attempt repairs non-unique IDs.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/checkIDs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validates and Optionally Repairs Unique IDs in a Pedigree Dataframe — checkIDs","text":"Depending `repair` value, either returns list containing validation results repaired dataframe","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/checkIDs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validates and Optionally Repairs Unique IDs in a Pedigree Dataframe — checkIDs","text":"","code":"if (FALSE) { # \\dontrun{ ped <- data.frame(ID = c(1, 2, 2, 3), dadID = c(NA, 1, 1, 2), momID = c(NA, NA, 2, 2)) checkIDs(ped, verbose = TRUE, repair = FALSE) } # }"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/checkIDuniqueness.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for duplicated individual IDs — checkIDuniqueness","title":"Check for duplicated individual IDs — checkIDuniqueness","text":"function checks duplicated individual IDs pedigree.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/checkIDuniqueness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for duplicated individual IDs — checkIDuniqueness","text":"","code":"checkIDuniqueness(ped, verbose = FALSE)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/checkIDuniqueness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for duplicated individual IDs — checkIDuniqueness","text":"ped dataframe representing pedigree data columns `ID`, `dadID`, `momID`. verbose logical flag indicating whether print progress validation messages console.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/checkIDuniqueness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for duplicated individual IDs — checkIDuniqueness","text":"list containing results check","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/checkParentIDs.html","id":null,"dir":"Reference","previous_headings":"","what":"Validates and Optionally Repairs Parent IDs in a Pedigree Dataframe — checkParentIDs","title":"Validates and Optionally Repairs Parent IDs in a Pedigree Dataframe — checkParentIDs","text":"function takes pedigree object performs two main tasks: 1. Checks validity parent IDs, specifically looking instances one parent ID missing. 2. Optionally repairs missing parent IDs based specified logic.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/checkParentIDs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validates and Optionally Repairs Parent IDs in a Pedigree Dataframe — checkParentIDs","text":"","code":"checkParentIDs(   ped,   verbose = FALSE,   repair = FALSE,   repairsex = repair,   addphantoms = repair,   parentswithoutrow = repair )"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/checkParentIDs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validates and Optionally Repairs Parent IDs in a Pedigree Dataframe — checkParentIDs","text":"ped dataframe representing pedigree data columns 'ID', 'dadID', 'momID'. verbose logical flag indicating whether print progress validation messages console. repair logical flag indicating whether attempt repairs missing parent IDs. repairsex logical flag indicating whether attempt repairs sex parents addphantoms logical flag indicating whether add phantom parents missing parent IDs. parentswithoutrow logical flag indicating whether add parents without row pedigree.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/checkParentIDs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validates and Optionally Repairs Parent IDs in a Pedigree Dataframe — checkParentIDs","text":"Depending value `repair`, either list containing validation results repaired dataframe returned.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/checkParentIDs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validates and Optionally Repairs Parent IDs in a Pedigree Dataframe — checkParentIDs","text":"","code":"if (FALSE) { # \\dontrun{ ped <- data.frame(ID = 1:4, dadID = c(NA, 1, 1, 2), momID = c(NA, NA, 2, 2)) checkParentIDs(ped, verbose = TRUE, repair = FALSE) } # }"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/checkParentSex.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Parental Role Sex Consistency — checkParentSex","title":"Check Parental Role Sex Consistency — checkParentSex","text":"Validates sex coding consistency given parental role (momID dadID).","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/checkParentSex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Parental Role Sex Consistency — checkParentSex","text":"","code":"checkParentSex(ped, parent_col, sex_col = \"sex\", verbose = FALSE)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/checkParentSex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Parental Role Sex Consistency — checkParentSex","text":"ped Pedigree dataframe. parent_col column name parent IDs (\"momID\" \"dadID\"). sex_col column name sex coding. Default \"sex\". verbose Logical, whether print messages.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/checkParentSex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Parental Role Sex Consistency — checkParentSex","text":"list containing role, unique sex codes, modal sex, inconsistent parents, linked children.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/checkPedigreeNetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Pedigree Network Structure — checkPedigreeNetwork","title":"Validate Pedigree Network Structure — checkPedigreeNetwork","text":"Checks structural issues pedigree networks, including: - Individuals two parents. - Presence cyclic parent-child relationships.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/checkPedigreeNetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Pedigree Network Structure — checkPedigreeNetwork","text":"","code":"checkPedigreeNetwork(   ped,   personID = \"ID\",   momID = \"momID\",   dadID = \"dadID\",   verbose = FALSE )"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/checkPedigreeNetwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Pedigree Network Structure — checkPedigreeNetwork","text":"ped Dataframe representing pedigree. personID Character. Column name individual IDs. momID Character. Column name maternal IDs. dadID Character. Column name paternal IDs. verbose Logical. TRUE, print informative messages.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/checkPedigreeNetwork.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Pedigree Network Structure — checkPedigreeNetwork","text":"List containing detailed validation results.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/checkPedigreeNetwork.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate Pedigree Network Structure — checkPedigreeNetwork","text":"","code":"if (FALSE) { # \\dontrun{ results <- checkPedigreeNetwork(ped,   personID = \"ID\",   momID = \"momID\", dadID = \"dadID\", verbose = TRUE ) } # }"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/checkSex.html","id":null,"dir":"Reference","previous_headings":"","what":"Validates and Optionally Repairs Sex Coding in a Pedigree Dataframe — checkSex","title":"Validates and Optionally Repairs Sex Coding in a Pedigree Dataframe — checkSex","text":"function checks optionally modifies coding biological 'sex' variable pedigree dataset. serves two primary purposes: 1. Recodes 'sex' variable based specified codes males females, provided. 2. Identifies optionally repairs inconsistencies sex coding break algorithm constructing genetic pedigrees.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/checkSex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validates and Optionally Repairs Sex Coding in a Pedigree Dataframe — checkSex","text":"","code":"checkSex(   ped,   code_male = NULL,   code_female = NULL,   verbose = FALSE,   repair = FALSE,   momID = \"momID\",   dadID = \"dadID\" )"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/checkSex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validates and Optionally Repairs Sex Coding in a Pedigree Dataframe — checkSex","text":"ped dataframe representing pedigree data 'sex' column. code_male current code used represent males 'sex' column. code_female current code used represent females 'sex' column. NULL, recoding performed. verbose logical flag indicating whether print progress validation messages console. repair logical flag indicating whether attempt repairs sex coding. momID column name maternal IDs. Default \"momID\". dadID column name paternal IDs. Default \"dadID\".","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/checkSex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validates and Optionally Repairs Sex Coding in a Pedigree Dataframe — checkSex","text":"Depending value `repair`, either list containing validation results repaired dataframe returned.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/checkSex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validates and Optionally Repairs Sex Coding in a Pedigree Dataframe — checkSex","text":"validation process identifies: - unique sex codes present dataset. - Whether individuals listed fathers mothers inconsistent sex codes. - Instances individual's recorded sex align parental role. `repair = TRUE`, function standardizes sex coding : - Assigning individuals listed fathers common male code dataset. - Assigning individuals listed mothers common female code. function uses terms 'male' 'female' biological context, referring chromosomal biologically-based characteristics necessary constructing genetic pedigrees. biological aspect sex used genetic analysis (genotype) distinct broader, richer concept gender identity (phenotype). recognize importance using language methodologies affirm respect full spectrum gender identities.  developers package express unequivocal support folx transgender LGBTQ+ communities.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/checkSex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validates and Optionally Repairs Sex Coding in a Pedigree Dataframe — checkSex","text":"","code":"if (FALSE) { # \\dontrun{ ped <- data.frame(ID = c(1, 2, 3), sex = c(\"M\", \"F\", \"M\")) checkSex(ped, code_male = \"M\", verbose = TRUE, repair = FALSE) } # }"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/checkWithinRowDuplicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for within-row duplicates (self-parents, same mom/dad) — checkWithinRowDuplicates","title":"Check for within-row duplicates (self-parents, same mom/dad) — checkWithinRowDuplicates","text":"function checks within-row duplicates pedigree.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/checkWithinRowDuplicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for within-row duplicates (self-parents, same mom/dad) — checkWithinRowDuplicates","text":"","code":"checkWithinRowDuplicates(ped, verbose = FALSE)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/checkWithinRowDuplicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for within-row duplicates (self-parents, same mom/dad) — checkWithinRowDuplicates","text":"ped dataframe representing pedigree data columns `ID`, `dadID`, `momID`. verbose logical flag indicating whether print progress validation messages console.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/checkWithinRowDuplicates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for within-row duplicates (self-parents, same mom/dad) — checkWithinRowDuplicates","text":"list containing results check","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/collapseNames.html","id":null,"dir":"Reference","previous_headings":"","what":"collapse Names — collapseNames","title":"collapse Names — collapseNames","text":"function combines `name_given` `name_given_pieces` columns data frame.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/collapseNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"collapse Names — collapseNames","text":"","code":"collapseNames(verbose, df_temp)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/collapseNames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"collapse Names — collapseNames","text":"verbose logical value indicating whether print messages. df_temp data frame containing columns combined.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/collapseNames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"collapse Names — collapseNames","text":"data frame combined columns.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/com2links.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Sparse Relationship Matrices to Kinship Links — com2links","title":"Convert Sparse Relationship Matrices to Kinship Links — com2links","text":"function processes one sparse relationship components (additive, mitochondrial, common nuclear) converts kinship link pairs. resulting related pairs either returned data frame written disk CSV format.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/com2links.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Sparse Relationship Matrices to Kinship Links — com2links","text":"","code":"com2links(   rel_pairs_file = \"dataRelatedPairs.csv\",   ad_ped_matrix = NULL,   mit_ped_matrix = mt_ped_matrix,   mt_ped_matrix = NULL,   cn_ped_matrix = NULL,   write_buffer_size = 1000,   update_rate = 1000,   gc = TRUE,   writetodisk = TRUE,   verbose = FALSE,   legacy = FALSE,   outcome_name = \"data\",   drop_upper_triangular = TRUE,   include_all_links_1ped = FALSE,   ... )"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/com2links.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Sparse Relationship Matrices to Kinship Links — com2links","text":"rel_pairs_file File path write related pairs (CSV format). ad_ped_matrix Matrix additive genetic relatedness coefficients. mit_ped_matrix Matrix mitochondrial relatedness coefficients. Alias: mt_ped_matrix. mt_ped_matrix Matrix mitochondrial relatedness coefficients. cn_ped_matrix Matrix common nuclear relatedness coefficients. write_buffer_size Number related pairs write disk time. update_rate Numeric. Frequency (iterations) progress messages printed. gc Logical. TRUE, performs garbage collection via gc free memory. writetodisk Logical. TRUE, writes related pairs disk; FALSE, returns data frame. verbose Logical. TRUE, prints progress messages. legacy Logical. TRUE, uses legacy branch function. outcome_name Character string representing outcome name (used file naming). drop_upper_triangular Logical. TRUE, drops upper triangular portion matrix. include_all_links_1ped Logical. TRUE, includes links output. (Default true one ped provided) ... Additional arguments passed com2links","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/com2links.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Sparse Relationship Matrices to Kinship Links — com2links","text":"data frame related pairs writetodisk FALSE; otherwise, writes results disk.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/combine_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine Columns — combine_columns","title":"Combine Columns — combine_columns","text":"function combines two columns, handling conflicts merging non-conflicting data.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/combine_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine Columns — combine_columns","text":"","code":"combine_columns(col1, col2)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/combine_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine Columns — combine_columns","text":"col1 first column combine. col2 second column combine.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/combine_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine Columns — combine_columns","text":"list combined column flag indicating second column retained.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/comp2vech.html","id":null,"dir":"Reference","previous_headings":"","what":"comp2vech Turn a variance component relatedness matrix into its half-vectorization — comp2vech","title":"comp2vech Turn a variance component relatedness matrix into its half-vectorization — comp2vech","text":"comp2vech Turn variance component relatedness matrix half-vectorization","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/comp2vech.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"comp2vech Turn a variance component relatedness matrix into its half-vectorization — comp2vech","text":"","code":"comp2vech(x, include.zeros = FALSE)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/comp2vech.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"comp2vech Turn a variance component relatedness matrix into its half-vectorization — comp2vech","text":"x Relatedness component matrix (can matrix, list, object inherits 'Matrix'). include.zeros logical. Whether include -zero rows. Default FALSE.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/comp2vech.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"comp2vech Turn a variance component relatedness matrix into its half-vectorization — comp2vech","text":"half-vectorization relatedness component matrix.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/comp2vech.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"comp2vech Turn a variance component relatedness matrix into its half-vectorization — comp2vech","text":"function wrapper around vech function, extending allow blockwise matrices specific classes. facilitates conversion variance component relatedness matrix half-vectorized form.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/comp2vech.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"comp2vech Turn a variance component relatedness matrix into its half-vectorization — comp2vech","text":"","code":"comp2vech(list(matrix(c(1, .5, .5, 1), 2, 2), matrix(1, 2, 2))) #> [1] 1.0 0.5 1.0 1.0 1.0 1.0"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/computeParentAdjacency.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Parent Adjacency Matrix with Multiple Approaches — computeParentAdjacency","title":"Compute Parent Adjacency Matrix with Multiple Approaches — computeParentAdjacency","text":"Compute Parent Adjacency Matrix Multiple Approaches","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/computeParentAdjacency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Parent Adjacency Matrix with Multiple Approaches — computeParentAdjacency","text":"","code":"computeParentAdjacency(   ped,   component,   adjacency_method = \"direct\",   saveable,   resume,   save_path,   verbose = FALSE,   lastComputed = 0,   checkpoint_files,   update_rate,   parList,   lens,   save_rate_parlist,   adjBeta_method = NULL,   config,   ... )"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/computeParentAdjacency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Parent Adjacency Matrix with Multiple Approaches — computeParentAdjacency","text":"ped pedigree dataset.  Needs ID, momID, dadID columns component character.  component pedigree return.  See Details. adjacency_method character. method use computing adjacency matrix.  Options \"loop\", \"indexed\", direct beta saveable logical. TRUE, save intermediate results disk resume logical. TRUE, resume checkpoint save_path character. path save checkpoint files verbose logical.  TRUE, print progress stages algorithm lastComputed last computed index checkpoint_files list checkpoint files update_rate rate update progress parList list parent-child relationships lens vector lengths parent-child relationships save_rate_parlist numeric. rate save intermediate results parent list. NULL, defaults save_rate*1000 adjBeta_method numeric method use computing building adjacency_method matrix using \"beta\" build config configuration list passes parameters function ... additional arguments passed ped2com","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/computeParentAdjacency.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Parent Adjacency Matrix with Multiple Approaches — computeParentAdjacency","text":"algorithms methodologies used function discussed exemplified vignette titled \"examplePedigreeFunctions\". advanced scenarios detailed explanations, consult vignette.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/convertGrid2LongTree.html","id":null,"dir":"Reference","previous_headings":"","what":"Make Long Tree — convertGrid2LongTree","title":"Make Long Tree — convertGrid2LongTree","text":"Make Long Tree","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/convertGrid2LongTree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make Long Tree — convertGrid2LongTree","text":"","code":"convertGrid2LongTree(tree_df, cols_to_pivot)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/convertGrid2LongTree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make Long Tree — convertGrid2LongTree","text":"tree_df data frame containing tree structure. cols_to_pivot character vector column names pivot.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/convertGrid2LongTree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make Long Tree — convertGrid2LongTree","text":"long data frame containing tree structure.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/countPatternRows.html","id":null,"dir":"Reference","previous_headings":"","what":"Count GEDCOM Pattern Rows — countPatternRows","title":"Count GEDCOM Pattern Rows — countPatternRows","text":"Counts number lines file (passed data frame column \"X1\") match various GEDCOM patterns.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/countPatternRows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count GEDCOM Pattern Rows — countPatternRows","text":"","code":"countPatternRows(file)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/countPatternRows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count GEDCOM Pattern Rows — countPatternRows","text":"file data frame column X1 containing GEDCOM lines.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/countPatternRows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count GEDCOM Pattern Rows — countPatternRows","text":"list counts specific GEDCOM tag occurrences.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/createGenDataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Data Frame for Generation — createGenDataFrame","title":"Create Data Frame for Generation — createGenDataFrame","text":"function creates data frame specific generation within simulated pedigree. initializes data frame default values family ID, individual ID, generation number, paternal ID, maternal ID, spouse ID, sex. individuals initially set NA paternal, maternal, spouse IDs, sex, awaiting assignment.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/createGenDataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Data Frame for Generation — createGenDataFrame","text":"","code":"createGenDataFrame(sizeGens, genIndex, idGen)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/createGenDataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Data Frame for Generation — createGenDataFrame","text":"sizeGens numeric vector containing sizes generation within pedigree. genIndex integer representing current generation index data frame created. idGen numeric vector containing ID numbers assigned individuals current generation.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/createGenDataFrame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Data Frame for Generation — createGenDataFrame","text":"data frame representing initial structure individuals specified generation         relationships (parental, spousal) defined. columns include family ID (`fam`),         individual ID (`id`), generation number (`gen`), father's ID (`pat`), mother's ID (`mat`),         spouse's ID (`spID`), sex (`sex`), NA values paternal, maternal, spouse IDs, sex.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/createGenDataFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Data Frame for Generation — createGenDataFrame","text":"","code":"sizeGens <- c(3, 5, 4) # Example sizes for 3 generations genIndex <- 2 # Creating data frame for the 2nd generation idGen <- 101:105 # Example IDs for the 2nd generation df_Ngen <- createGenDataFrame(sizeGens, genIndex, idGen) print(df_Ngen) #>     fam  id gen pat mat spID sex #> 1 fam 1 101   2  NA  NA   NA  NA #> 2 fam 1 102   2  NA  NA   NA  NA #> 3 fam 1 103   2  NA  NA   NA  NA #> 4 fam 1 104   2  NA  NA   NA  NA #> 5 fam 1 105   2  NA  NA   NA  NA"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/deduplicatePairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Deduplicate pairs of IDs in a data frame — deduplicatePairs","title":"Deduplicate pairs of IDs in a data frame — deduplicatePairs","text":"Deduplicate pairs IDs data frame","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/deduplicatePairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deduplicate pairs of IDs in a data frame — deduplicatePairs","text":"","code":"deduplicatePairs(df)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/deduplicatePairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deduplicate pairs of IDs in a data frame — deduplicatePairs","text":"df data frame columns from_id to_id","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/deduplicatePairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deduplicate pairs of IDs in a data frame — deduplicatePairs","text":"data frame unique pairs IDs","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/determineSex.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine Sex of Offspring — determineSex","title":"Determine Sex of Offspring — determineSex","text":"internal function assigns sexes offspring generation based specified sex ratio.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/determineSex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine Sex of Offspring — determineSex","text":"","code":"determineSex(idGen, sexR, code_male = \"M\", code_female = \"F\")"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/determineSex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine Sex of Offspring — determineSex","text":"idGen Vector IDs generation. sexR Numeric value indicating sex ratio (proportion males). code_male value use males. Default \"M\" code_female value use females. Default \"F\"","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/determineSex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine Sex of Offspring — determineSex","text":"Vector sexes (\"M\" male, \"F\" female) offspring.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-assignParentValue.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign parent values based on component type — .assignParentValue","title":"Assign parent values based on component type — .assignParentValue","text":"Assign parent values based component type","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-assignParentValue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign parent values based on component type — .assignParentValue","text":"","code":".assignParentValue(component)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-assignParentValue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign parent values based on component type — .assignParentValue","text":"component character.  component pedigree return.  See Details.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-collapseNames.legacy.html","id":null,"dir":"Reference","previous_headings":"","what":"collapse Names — .collapseNames.legacy","title":"collapse Names — .collapseNames.legacy","text":"function combines `name_given` `name_given_pieces` columns data frame.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-collapseNames.legacy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"collapse Names — .collapseNames.legacy","text":"","code":".collapseNames.legacy(verbose, df_temp)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-collapseNames.legacy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"collapse Names — .collapseNames.legacy","text":"verbose logical value indicating whether print messages. df_temp data frame containing columns combined.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-com2links.legacy.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Sparse Relationship Matrices to Kinship Links — .com2links.legacy","title":"Convert Sparse Relationship Matrices to Kinship Links — .com2links.legacy","text":"Convert Sparse Relationship Matrices Kinship Links","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-com2links.legacy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Sparse Relationship Matrices to Kinship Links — .com2links.legacy","text":"","code":".com2links.legacy(   rel_pairs_file = \"dataRelatedPairs.csv\",   ad_ped_matrix = NULL,   mit_ped_matrix = mt_ped_matrix,   mt_ped_matrix = NULL,   cn_ped_matrix = NULL,   write_buffer_size = 1000,   update_rate = 1000,   gc = TRUE,   writetodisk = TRUE,   verbose = FALSE,   legacy = FALSE,   outcome_name = \"data\",   drop_upper_triangular = TRUE,   ... )"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-com2links.legacy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Sparse Relationship Matrices to Kinship Links — .com2links.legacy","text":"rel_pairs_file File path write related pairs (CSV format). ad_ped_matrix Matrix additive genetic relatedness coefficients. mit_ped_matrix Matrix mitochondrial relatedness coefficients. Alias: mt_ped_matrix. mt_ped_matrix Matrix mitochondrial relatedness coefficients. cn_ped_matrix Matrix common nuclear relatedness coefficients. write_buffer_size Number related pairs write disk time. update_rate Numeric. Frequency (iterations) progress messages printed. gc Logical. TRUE, performs garbage collection via gc free memory. writetodisk Logical. TRUE, writes related pairs disk; FALSE, returns data frame. verbose Logical. TRUE, prints progress messages. legacy Logical. TRUE, uses legacy branch function. outcome_name Character string representing outcome name (used file naming). drop_upper_triangular Logical. TRUE, drops upper triangular portion matrix. ... Additional arguments passed com2links","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-com2links.og.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Pedigree Matrices to Related Pairs File (Legacy) — .com2links.og","title":"Convert Pedigree Matrices to Related Pairs File (Legacy) — .com2links.og","text":"legacy function converts pedigree matrices related pairs file.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-com2links.og.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Pedigree Matrices to Related Pairs File (Legacy) — .com2links.og","text":"","code":".com2links.og(   rel_pairs_file = \"dataRelatedPairs.csv\",   ad_ped_matrix = NULL,   mit_ped_matrix = mt_ped_matrix,   mt_ped_matrix = NULL,   cn_ped_matrix = NULL,   update_rate = 500,   verbose = FALSE,   outcome_name = \"data\",   ... )"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-com2links.og.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Pedigree Matrices to Related Pairs File (Legacy) — .com2links.og","text":"rel_pairs_file File path write related pairs (CSV format). ad_ped_matrix Matrix additive genetic relatedness coefficients. mit_ped_matrix Matrix mitochondrial relatedness coefficients. Alias: mt_ped_matrix. mt_ped_matrix Matrix mitochondrial relatedness coefficients. cn_ped_matrix Matrix common nuclear relatedness coefficients. update_rate Numeric. Frequency (iterations) progress messages printed. verbose Logical. TRUE, prints progress messages. outcome_name Character string representing outcome name (used file naming). ... Additional arguments passed com2links","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-combine_columns.legacy.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine Columns — .combine_columns.legacy","title":"Combine Columns — .combine_columns.legacy","text":"function combines two columns, handling conflicts merging non-conflicting data.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-combine_columns.legacy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine Columns — .combine_columns.legacy","text":"","code":".combine_columns.legacy(col1, col2)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-combine_columns.legacy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine Columns — .combine_columns.legacy","text":"col1 first column combine. col2 second column combine.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-combine_columns.legacy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine Columns — .combine_columns.legacy","text":"list combined column flag indicating second column retained.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-computeTranspose.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the transpose multiplication for the relatedness matrix — .computeTranspose","title":"Compute the transpose multiplication for the relatedness matrix — .computeTranspose","text":"Compute transpose multiplication relatedness matrix","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-computeTranspose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the transpose multiplication for the relatedness matrix — .computeTranspose","text":"","code":".computeTranspose(r2, transpose_method = \"tcrossprod\", verbose = FALSE)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-computeTranspose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the transpose multiplication for the relatedness matrix — .computeTranspose","text":"r2 relatedness matrix transpose_method character. method use computing transpose.  Options \"tcrossprod\", \"crossprod\", \"star\" verbose logical.  TRUE, print progress stages algorithm","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-computeTranspose.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the transpose multiplication for the relatedness matrix — .computeTranspose","text":"algorithms methodologies used function discussed exemplified vignette titled \"examplePedigreeFunctions\". advanced scenarios detailed explanations, consult vignette.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-countPatternRows.legacy.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for Pattern Rows — .countPatternRows.legacy","title":"Check for Pattern Rows — .countPatternRows.legacy","text":"function counts number rows containing specific patterns.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-countPatternRows.legacy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for Pattern Rows — .countPatternRows.legacy","text":"","code":".countPatternRows.legacy(file)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-countPatternRows.legacy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for Pattern Rows — .countPatternRows.legacy","text":"file data frame containing GEDCOM file.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-countPatternRows.legacy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for Pattern Rows — .countPatternRows.legacy","text":"list number rows containing pattern.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-extract_info.legacy.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Information from Line — .extract_info.legacy","title":"Extract Information from Line — .extract_info.legacy","text":"function extracts information line based specified type.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-extract_info.legacy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Information from Line — .extract_info.legacy","text":"","code":".extract_info.legacy(line, type)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-extract_info.legacy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Information from Line — .extract_info.legacy","text":"line character string representing line GEDCOM file. type character string representing type information extract.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-extract_info.legacy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Information from Line — .extract_info.legacy","text":"character string extracted information.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-getModalValue.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Modal Value of a Vector — .getModalValue","title":"Get the Modal Value of a Vector — .getModalValue","text":"function calculates modal value vector, frequently occurring value. vector empty contains NA values, returns NA.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-getModalValue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Modal Value of a Vector — .getModalValue","text":"","code":".getModalValue(x)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-getModalValue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the Modal Value of a Vector — .getModalValue","text":"x vector values.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-getModalValue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Modal Value of a Vector — .getModalValue","text":"modal value vector. vector empty contains NA values, returns NA.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-loadOrComputeIsChild.html","id":null,"dir":"Reference","previous_headings":"","what":"Load or compute the isChild matrix — .loadOrComputeIsChild","title":"Load or compute the isChild matrix — .loadOrComputeIsChild","text":"Load compute isChild matrix","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-loadOrComputeIsChild.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load or compute the isChild matrix — .loadOrComputeIsChild","text":"","code":".loadOrComputeIsChild(ped, checkpoint_files, config)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-loadOrComputeIsChild.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load or compute the isChild matrix — .loadOrComputeIsChild","text":"ped pedigree dataset.  Needs ID, momID, dadID columns checkpoint_files list checkpoint file paths. @keywords internal config list containing configuration parameters `resume`, `verbose`, `saveable`.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-loadOrComputeIsPar.html","id":null,"dir":"Reference","previous_headings":"","what":"Load or compute the isPar matrix — .loadOrComputeIsPar","title":"Load or compute the isPar matrix — .loadOrComputeIsPar","text":"Load compute isPar matrix","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-loadOrComputeIsPar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load or compute the isPar matrix — .loadOrComputeIsPar","text":"","code":".loadOrComputeIsPar(iss, jss, parVal, ped, checkpoint_files, config)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-loadOrComputeIsPar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load or compute the isPar matrix — .loadOrComputeIsPar","text":"iss row indices sparse matrix. jss column indices sparse matrix. parVal value assign non-zero elements sparse matrix. ped pedigree dataset. checkpoint_files list checkpoint file paths. config list containing configuration parameters `resume`, `verbose`, `saveable`.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-loadOrComputeParList.html","id":null,"dir":"Reference","previous_headings":"","what":"parent-child adjacency data — .loadOrComputeParList","title":"parent-child adjacency data — .loadOrComputeParList","text":"parent-child adjacency data","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-loadOrComputeParList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"parent-child adjacency data — .loadOrComputeParList","text":"","code":".loadOrComputeParList(   checkpoint_files,   config,   ped = NULL,   parList = NULL,   lens = NULL )"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-loadOrComputeParList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"parent-child adjacency data — .loadOrComputeParList","text":"checkpoint_files list checkpoint file paths. config list containing configuration parameters `resume`, `verbose`, `saveable`. ped pedigree dataset.  Needs ID, momID, dadID columns parList list parent-child adjacency data. lens vector lengths parent-child relationship.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-loadOrComputeParList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"parent-child adjacency data — .loadOrComputeParList","text":"list containing parent-child adjacency data either loaded checkpoint initialized.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-mapFAMC2parents.legacy.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign momID and dadID based on family mapping — .mapFAMC2parents.legacy","title":"Assign momID and dadID based on family mapping — .mapFAMC2parents.legacy","text":"function assigns mother father IDs individuals data frame based mapping family IDs parent IDs.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-mapFAMC2parents.legacy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign momID and dadID based on family mapping — .mapFAMC2parents.legacy","text":"","code":".mapFAMC2parents.legacy(df_temp, family_to_parents)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-mapFAMC2parents.legacy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign momID and dadID based on family mapping — .mapFAMC2parents.legacy","text":"df_temp data frame containing individual information. family_to_parents list mapping family IDs parent IDs.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-mapFAMC2parents.legacy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign momID and dadID based on family mapping — .mapFAMC2parents.legacy","text":"data frame added momID dad_ID columns.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-mapFAMS2parents.legacy.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a mapping of family IDs to parent IDs — .mapFAMS2parents.legacy","title":"Create a mapping of family IDs to parent IDs — .mapFAMS2parents.legacy","text":"function creates mapping family IDs IDs parents.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-mapFAMS2parents.legacy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a mapping of family IDs to parent IDs — .mapFAMS2parents.legacy","text":"","code":".mapFAMS2parents.legacy(df_temp)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-mapFAMS2parents.legacy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a mapping of family IDs to parent IDs — .mapFAMS2parents.legacy","text":"df_temp data frame containing information individuals.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-mapFAMS2parents.legacy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a mapping of family IDs to parent IDs — .mapFAMS2parents.legacy","text":"list mapping family IDs parent IDs.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-postProcessGedcom.legacy.html","id":null,"dir":"Reference","previous_headings":"","what":"Post-process GEDCOM Data Frame — .postProcessGedcom.legacy","title":"Post-process GEDCOM Data Frame — .postProcessGedcom.legacy","text":"Post-process GEDCOM Data Frame","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-postProcessGedcom.legacy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post-process GEDCOM Data Frame — .postProcessGedcom.legacy","text":"","code":".postProcessGedcom.legacy(   df_temp,   remove_empty_cols = TRUE,   combine_cols = TRUE,   add_parents = TRUE,   skinny = TRUE,   verbose = FALSE )"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-postProcessGedcom.legacy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post-process GEDCOM Data Frame — .postProcessGedcom.legacy","text":"df_temp data frame containing information individuals. remove_empty_cols logical value indicating whether remove columns missing values. combine_cols logical value indicating whether combine columns duplicate values. add_parents logical value indicating whether add parents data frame. skinny logical value indicating whether return skinny data frame. verbose logical value indicating whether print messages.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-postProcessGedcom.legacy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Post-process GEDCOM Data Frame — .postProcessGedcom.legacy","text":"data frame processed information.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-processParents.legacy.html","id":null,"dir":"Reference","previous_headings":"","what":"Process parents information — .processParents.legacy","title":"Process parents information — .processParents.legacy","text":"function processes dataframe add momID dadID columns.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-processParents.legacy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process parents information — .processParents.legacy","text":"","code":".processParents.legacy(df_temp, datasource)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-processParents.legacy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process parents information — .processParents.legacy","text":"df_temp data frame containing information individuals.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-processParents.legacy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process parents information — .processParents.legacy","text":"data frame added momID dadID columns.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-process_tag.legacy.html","id":null,"dir":"Reference","previous_headings":"","what":"Process a GEDCOM Tag — .process_tag.legacy","title":"Process a GEDCOM Tag — .process_tag.legacy","text":"Extracts assigns value specified field `vars` pattern present. Returns updated variable list flag indicating whether tag matched.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-process_tag.legacy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process a GEDCOM Tag — .process_tag.legacy","text":"","code":".process_tag.legacy(   tag,   field_name,   pattern_rows,   line,   vars,   extractor = NULL,   mode = \"replace\" )"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-process_tag.legacy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process a GEDCOM Tag — .process_tag.legacy","text":"tag GEDCOM tag (e.g., \"SEX\", \"CAST\", etc.). field_name name variable assign `vars`. pattern_rows Output `countPatternRows()`. line GEDCOM line parse. vars current list variables update.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-process_tag.legacy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process a GEDCOM Tag — .process_tag.legacy","text":"list updated `vars` `matched` flag.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-readGedcom.legacy.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a GEDCOM File — .readGedcom.legacy","title":"Read a GEDCOM File — .readGedcom.legacy","text":"function reads GEDCOM file parses structured data frame individuals. Inspired https://raw.githubusercontent.com/jjfitz/readgedcom/master/R/read_gedcom.R","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-readGedcom.legacy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a GEDCOM File — .readGedcom.legacy","text":"","code":".readGedcom.legacy(   file_path,   verbose = FALSE,   add_parents = TRUE,   remove_empty_cols = TRUE,   combine_cols = TRUE,   skinny = FALSE,   update_rate = 1000,   post_process = TRUE,   ... )"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-readGedcom.legacy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a GEDCOM File — .readGedcom.legacy","text":"file_path path GEDCOM file. verbose logical value indicating whether print messages. add_parents logical value indicating whether add parents data frame. remove_empty_cols logical value indicating whether remove columns missing values. combine_cols logical value indicating whether combine columns duplicate values. skinny logical value indicating whether return skinny data frame. update_rate numeric. rate print progress ... Additional arguments passed function.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dot-readGedcom.legacy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a GEDCOM File — .readGedcom.legacy","text":"data frame containing information individuals, following potential columns: - `id`: ID individual - `momID`: ID individual's mother - `dadID`: ID individual's father - `sex`: Sex individual - `name`: Full name individual - `name_given`: First name individual - `name_surn`: Last name individual - `name_marriedsurn`: Married name individual - `name_nick`: Nickname individual - `name_npfx`: Name prefix - `name_nsfx`: Name suffix - `birth_date`: Birth date individual - `birth_lat`: Latitude birthplace - `birth_long`: Longitude birthplace - `birth_place`: Birthplace individual - `death_caus`: Cause death - `death_date`: Death date individual - `death_lat`: Latitude place death - `death_long`: Longitude place death - `death_place`: Place death individual - `attribute_caste`: Caste individual - `attribute_children`: Number children individual - `attribute_description`: Description individual - `attribute_education`: Education individual - `attribute_idnumber`: Identification number individual - `attribute_marriages`: Number marriages individual - `attribute_nationality`: Nationality individual - `attribute_occupation`: Occupation individual - `attribute_property`: Property owned individual - `attribute_religion`: Religion individual - `attribute_residence`: Residence individual - `attribute_ssn`: Social security number individual - `attribute_title`: Title individual - `FAMC`: ID(s) family individual child - `FAMS`: ID(s) family individual spouse","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dropLink.html","id":null,"dir":"Reference","previous_headings":"","what":"dropLink A function to drop a person from his/her parents in the simulated pedigree data.frame. The person can be dropped by specifying his/her ID or by specifying the generation which the randomly to-be-dropped person is in. The function can separate one pedigree into two pedigrees. Separating into small pieces should be done by running the function multiple times. This is a supplementary function for simulatePedigree. — dropLink","title":"dropLink A function to drop a person from his/her parents in the simulated pedigree data.frame. The person can be dropped by specifying his/her ID or by specifying the generation which the randomly to-be-dropped person is in. The function can separate one pedigree into two pedigrees. Separating into small pieces should be done by running the function multiple times. This is a supplementary function for simulatePedigree. — dropLink","text":"dropLink function drop person /parents simulated pedigree data.frame. person can dropped specifying /ID specifying generation randomly --dropped person . function can separate one pedigree two pedigrees. Separating small pieces done running function multiple times. supplementary function simulatePedigree.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dropLink.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dropLink A function to drop a person from his/her parents in the simulated pedigree data.frame. The person can be dropped by specifying his/her ID or by specifying the generation which the randomly to-be-dropped person is in. The function can separate one pedigree into two pedigrees. Separating into small pieces should be done by running the function multiple times. This is a supplementary function for simulatePedigree. — dropLink","text":"","code":"dropLink(   ped,   ID_drop = NA_integer_,   gen_drop = 2,   sex_drop = NA_character_,   n_drop = 1 )"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dropLink.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dropLink A function to drop a person from his/her parents in the simulated pedigree data.frame. The person can be dropped by specifying his/her ID or by specifying the generation which the randomly to-be-dropped person is in. The function can separate one pedigree into two pedigrees. Separating into small pieces should be done by running the function multiple times. This is a supplementary function for simulatePedigree. — dropLink","text":"ped pedigree simulated simulatePedigree function format ID_drop ID person dropped /parents. gen_drop generation randomly dropped person . work `ID_drop` specified. sex_drop biological sex randomly dropped person. n_drop number times mutation happens.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/dropLink.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dropLink A function to drop a person from his/her parents in the simulated pedigree data.frame. The person can be dropped by specifying his/her ID or by specifying the generation which the randomly to-be-dropped person is in. The function can separate one pedigree into two pedigrees. Separating into small pieces should be done by running the function multiple times. This is a supplementary function for simulatePedigree. — dropLink","text":"pedigree dropped person's `dadID` `momID` set NA.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/efunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Error Function — efunc","title":"Error Function — efunc","text":"Error Function","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/efunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Error Function — efunc","text":"","code":"efunc(error)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/efunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Error Function — efunc","text":"error error output","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/efunc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Error Function — efunc","text":"Replaces error message (error) NA","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/extractMemberTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Match Members — extractMemberTable","title":"Match Members — extractMemberTable","text":"Match Members","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/extractMemberTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match Members — extractMemberTable","text":"","code":"extractMemberTable(text)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/extractMemberTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match Members — extractMemberTable","text":"text character string containing text family tree wiki format.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/extractMemberTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match Members — extractMemberTable","text":"data frame containing information members family tree.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/extract_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Information from Line — extract_info","title":"Extract Information from Line — extract_info","text":"function extracts information line based specified type.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/extract_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Information from Line — extract_info","text":"","code":"extract_info(line, type)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/extract_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Information from Line — extract_info","text":"line character string representing line GEDCOM file. type character string representing type information extract.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/extract_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Information from Line — extract_info","text":"character string extracted information.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/findBiggest.html","id":null,"dir":"Reference","previous_headings":"","what":"This function finds the biggest families in a pedigree. It is supposed to be used internally by the summarize_pedigree function. — findBiggest","title":"This function finds the biggest families in a pedigree. It is supposed to be used internally by the summarize_pedigree function. — findBiggest","text":"function finds biggest families pedigree. supposed used internally summarize_pedigree function.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/findBiggest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function finds the biggest families in a pedigree. It is supposed to be used internally by the summarize_pedigree function. — findBiggest","text":"","code":"findBiggest(foo_summary_dt, nbiggest, n_foo)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/findBiggest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function finds the biggest families in a pedigree. It is supposed to be used internally by the summarize_pedigree function. — findBiggest","text":"foo_summary_dt data.table containing summary statistics. nbiggest Integer. Number largest lineages return (sorted count). n_foo integer specifying number individuals summary.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/findBiggest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function finds the biggest families in a pedigree. It is supposed to be used internally by the summarize_pedigree function. — findBiggest","text":"data.table containing biggest families pedigree.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/findFounder.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to find the originating member for each line — findFounder","title":"Function to find the originating member for each line — findFounder","text":"function finds originating member line pedigree. supposed used internally summarize_pedigree function.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/findFounder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to find the originating member for each line — findFounder","text":"","code":"findFounder(data, group_var, sort_var)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/findFounder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to find the originating member for each line — findFounder","text":"data data.table containing pedigree data. sort_var character string specifying column name sort .","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/findFounder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to find the originating member for each line — findFounder","text":"data.table containing originating member line.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/findOldest.html","id":null,"dir":"Reference","previous_headings":"","what":"This function finds the oldest families in a pedigree. It is supposed to be used internally by the summarize_pedigree function. — findOldest","title":"This function finds the oldest families in a pedigree. It is supposed to be used internally by the summarize_pedigree function. — findOldest","text":"function finds oldest families pedigree. supposed used internally summarize_pedigree function.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/findOldest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function finds the oldest families in a pedigree. It is supposed to be used internally by the summarize_pedigree function. — findOldest","text":"","code":"findOldest(foo_summary_dt, byr, noldest, n_foo)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/findOldest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function finds the oldest families in a pedigree. It is supposed to be used internally by the summarize_pedigree function. — findOldest","text":"foo_summary_dt data.table containing summary statistics. byr Character. Optional column name birth year. Used determine oldest lineages. noldest Integer. Number oldest lineages return (sorted birth year). n_foo integer specifying number individuals summary.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/findOldest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function finds the oldest families in a pedigree. It is supposed to be used internally by the summarize_pedigree function. — findOldest","text":"data.table containing oldest families pedigree.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/fitComponentModel.html","id":null,"dir":"Reference","previous_headings":"","what":"fitComponentModel Fit the estimated variance components of a model to covariance data — fitComponentModel","title":"fitComponentModel Fit the estimated variance components of a model to covariance data — fitComponentModel","text":"fitComponentModel Fit estimated variance components model covariance data","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/fitComponentModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fitComponentModel Fit the estimated variance components of a model to covariance data — fitComponentModel","text":"","code":"fitComponentModel(covmat, ...)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/fitComponentModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fitComponentModel Fit the estimated variance components of a model to covariance data — fitComponentModel","text":"covmat covariance matrix raw data, may blockwise. ... Comma-separated relatedness component matrices representing variance components model.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/fitComponentModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fitComponentModel Fit the estimated variance components of a model to covariance data — fitComponentModel","text":"regression (linear model fitted lm). coefficients regression represent estimated variance components.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/fitComponentModel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"fitComponentModel Fit the estimated variance components of a model to covariance data — fitComponentModel","text":"function fits estimated variance components model given covariance data. rank component matrices checked ensure variance components identified. Warnings issued inconsistencies.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/fitComponentModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"fitComponentModel Fit the estimated variance components of a model to covariance data — fitComponentModel","text":"","code":"if (FALSE) { # \\dontrun{ # install.packages(\"OpenMX\") data(twinData, package = \"OpenMx\") sellVars <- c(\"ht1\", \"ht2\") mzData <- subset(twinData, zyg %in% c(1), c(selVars, \"zyg\")) dzData <- subset(twinData, zyg %in% c(3), c(selVars, \"zyg\"))  fitComponentModel(   covmat = list(cov(mzData[, selVars], use = \"pair\"), cov(dzData[, selVars], use = \"pair\")),   A = list(matrix(1, nrow = 2, ncol = 2), matrix(c(1, 0.5, 0.5, 1), nrow = 2, ncol = 2)),   C = list(matrix(1, nrow = 2, ncol = 2), matrix(1, nrow = 2, ncol = 2)),   E = list(diag(1, nrow = 2), diag(1, nrow = 2)) ) } # }"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/getGridNeighbors.html","id":null,"dir":"Reference","previous_headings":"","what":"Build adjacency list (4-way neighbors) — getGridNeighbors","title":"Build adjacency list (4-way neighbors) — getGridNeighbors","text":"Build adjacency list (4-way neighbors)","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/getGridNeighbors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build adjacency list (4-way neighbors) — getGridNeighbors","text":"","code":"getGridNeighbors(cell, active_keys)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/getGridNeighbors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build adjacency list (4-way neighbors) — getGridNeighbors","text":"cell data frame columns Row Column","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/getGridNeighbors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build adjacency list (4-way neighbors) — getGridNeighbors","text":"character vector neighboring cell keys","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/getWikiTreeSummary.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Summary Text — getWikiTreeSummary","title":"Extract Summary Text — getWikiTreeSummary","text":"Extract Summary Text","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/getWikiTreeSummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Summary Text — getWikiTreeSummary","text":"","code":"getWikiTreeSummary(text)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/getWikiTreeSummary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Summary Text — getWikiTreeSummary","text":"text character string containing text family tree wiki format.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/getWikiTreeSummary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Summary Text — getWikiTreeSummary","text":"character string containing summary text.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/hazard.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated pedigree with two extended families and an age-related hazard — hazard","title":"Simulated pedigree with two extended families and an age-related hazard — hazard","text":"dataset simulated age-related hazard. two extended families sampled population.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/hazard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated pedigree with two extended families and an age-related hazard — hazard","text":"","code":"data(hazard)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/hazard.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated pedigree with two extended families and an age-related hazard — hazard","text":"data frame 43 rows 14 variables","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/hazard.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulated pedigree with two extended families and an age-related hazard — hazard","text":"variables follows: FamID:  ID extended family ID:  Person identification variable sex:  Sex ID: 1 female; 0 male dadID:  ID father momID:  ID mother affected:  logical.  Whether person affected DA1:  Binary variable signifying meaninglessness life DA2:  Binary variable signifying fundamental unknowability existence birthYr:  Birth year person onsetYr:  Year onset person deathYr:  Death year person available:  logical.  Whether Gen:  Generation person proband:  logical.  Whether person proband ","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/identifyComponentModel.html","id":null,"dir":"Reference","previous_headings":"","what":"identifyComponentModel Determine if a variance components model is identified — identifyComponentModel","title":"identifyComponentModel Determine if a variance components model is identified — identifyComponentModel","text":"identifyComponentModel Determine variance components model identified","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/identifyComponentModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"identifyComponentModel Determine if a variance components model is identified — identifyComponentModel","text":"","code":"identifyComponentModel(..., verbose = TRUE)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/identifyComponentModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"identifyComponentModel Determine if a variance components model is identified — identifyComponentModel","text":"... Comma-separated relatedness component matrices representing variance components model. verbose logical. FALSE, suppresses messages identification; TRUE default.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/identifyComponentModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"identifyComponentModel Determine if a variance components model is identified — identifyComponentModel","text":"list length 2 containing: identified: TRUE model identified, FALSE otherwise. nidp: vector non-identified parameters, specifying names components simultaneously identified.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/identifyComponentModel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"identifyComponentModel Determine if a variance components model is identified — identifyComponentModel","text":"function checks identification status given variance components model examining rank concatenated matrices components. components identified, names returned output.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/identifyComponentModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"identifyComponentModel Determine if a variance components model is identified — identifyComponentModel","text":"","code":"identifyComponentModel(A = list(matrix(1, 2, 2)), C = list(matrix(1, 2, 2)), E = diag(1, 2)) #> Component model is not identified. #> Non-identified parameters are  A, C  #> $identified #> [1] FALSE #>  #> $nidp #> [1] \"A\" \"C\" #>"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/inbreeding.html","id":null,"dir":"Reference","previous_headings":"","what":"Artificial pedigree data on eight families with inbreeding — inbreeding","title":"Artificial pedigree data on eight families with inbreeding — inbreeding","text":"dataset created purely imagination includes several types inbreeding. Different kinds inbreeding occur extended family.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/inbreeding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Artificial pedigree data on eight families with inbreeding — inbreeding","text":"","code":"data(inbreeding)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/inbreeding.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Artificial pedigree data on eight families with inbreeding — inbreeding","text":"data frame (ped object) 134 rows 7 variables","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/inbreeding.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Artificial pedigree data on eight families with inbreeding — inbreeding","text":"types inbreeding follows: Extended Family 1: Sister wives - Children father different mothers sisters. Extended Family 2: Full siblings children. Extended Family 3: Half siblings children. Extended Family 4: First cousins children. Extended Family 5: Father child daughter. Extended Family 6: Half sister wives - Children father different mothers half sisters. Extended Family 7: Uncle-niece Aunt-nephew children. Extended Family 8: father-son pairs children corresponding mother-daughter pair. Although structures technically inbreeding, aim test pedigree diagramming path tracing algorithms. variables follows: ID:  Person identification variable sex:  Sex ID: 1 female; 0 male dadID:  ID father momID:  ID mother FamID:  ID extended family Gen:  Generation person proband:  Always FALSE","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/inferRelatedness.html","id":null,"dir":"Reference","previous_headings":"","what":"Infer Relatedness Coefficient — inferRelatedness","title":"Infer Relatedness Coefficient — inferRelatedness","text":"function infers relatedness coefficient two groups based observed correlation additive genetic variance shared environmental variance.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/inferRelatedness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Infer Relatedness Coefficient — inferRelatedness","text":"","code":"inferRelatedness(obsR, aceA = 0.9, aceC = 0, sharedC = 0)  relatedness(...)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/inferRelatedness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Infer Relatedness Coefficient — inferRelatedness","text":"obsR Numeric. Observed correlation two groups. Must -1 1. aceA Numeric. Proportion variance attributable additive genetic variance. Must 0 1. Default 0.9. aceC Numeric. Proportion variance attributable shared environmental variance. Must 0 1. Default 0. sharedC Numeric. Proportion shared environment shared two individuals. Must 0 (shared environment) 1 (completely shared environment). Default 0. ... named arguments may passed another function.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/inferRelatedness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Infer Relatedness Coefficient — inferRelatedness","text":"Numeric. calculated relatedness coefficient (`est_r`).","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/inferRelatedness.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Infer Relatedness Coefficient — inferRelatedness","text":"function uses ACE (Additive genetic, Common environmental, Unique environmental) model infer relatedness two individuals groups. considering observed correlation (`obsR`), proportion variance attributable additive genetic variance (`aceA`), proportion shared environmental variance (`aceC`), calculates relatedness coefficient.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/inferRelatedness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Infer Relatedness Coefficient — inferRelatedness","text":"","code":"if (FALSE) { # \\dontrun{ # Infer the relatedness coefficient: inferRelatedness(obsR = 0.5, aceA = 0.9, aceC = 0, sharedC = 0) } # }"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/initializeCheckpoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize checkpoint files — initializeCheckpoint","title":"Initialize checkpoint files — initializeCheckpoint","text":"Initialize checkpoint files","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/initializeCheckpoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize checkpoint files — initializeCheckpoint","text":"","code":"initializeCheckpoint(   config = list(verbose = FALSE, saveable = FALSE, resume = FALSE, save_path =     \"checkpoint/\") )"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/initializeRecord.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize an Empty Individual Record — initializeRecord","title":"Initialize an Empty Individual Record — initializeRecord","text":"Creates named list GEDCOM fields set NA.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/initializeRecord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize an Empty Individual Record — initializeRecord","text":"","code":"initializeRecord(all_var_names)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/initializeRecord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize an Empty Individual Record — initializeRecord","text":"all_var_names character vector variable names.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/initializeRecord.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize an Empty Individual Record — initializeRecord","text":"named list representing empty individual record.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/initialize_empty_df.html","id":null,"dir":"Reference","previous_headings":"","what":"initialize_empty_df — initialize_empty_df","title":"initialize_empty_df — initialize_empty_df","text":"function initializes empty data frame specified column names.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/initialize_empty_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"initialize_empty_df — initialize_empty_df","text":"","code":"initialize_empty_df(relNames)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/initialize_empty_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"initialize_empty_df — initialize_empty_df","text":"relNames vector column names included data frame.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/initialize_empty_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"initialize_empty_df — initialize_empty_df","text":"empty data frame specified column names.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/insertEven.html","id":null,"dir":"Reference","previous_headings":"","what":"evenInsert A function to insert m elements evenly into a length n vector. — insertEven","title":"evenInsert A function to insert m elements evenly into a length n vector. — insertEven","text":"evenInsert function insert m elements evenly length n vector.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/insertEven.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"evenInsert A function to insert m elements evenly into a length n vector. — insertEven","text":"","code":"insertEven(m, n, verbose = FALSE)  evenInsert(m, n, verbose = FALSE)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/insertEven.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"evenInsert A function to insert m elements evenly into a length n vector. — insertEven","text":"m numeric vector length less equal n. elements inserted. n numeric vector. vector elements m inserted. verbose logical  TRUE, prints additional information. Default FALSE.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/insertEven.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"evenInsert A function to insert m elements evenly into a length n vector. — insertEven","text":"Returns numeric vector elements m evenly inserted n.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/insertEven.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"evenInsert A function to insert m elements evenly into a length n vector. — insertEven","text":"function takes two vectors, m n, inserts elements m evenly n. length m greater length n, vectors swapped, insertion proceeds. resulting vector combination m n, elements m evenly distributed within n.","code":""},{"path":[]},{"path":"https://r-computing-lab.github.io/BGmisc/reference/isChild.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine isChild Status, isChild is the 'S' matrix from RAM — isChild","title":"Determine isChild Status, isChild is the 'S' matrix from RAM — isChild","text":"Determine isChild Status, isChild 'S' matrix RAM","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/isChild.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine isChild Status, isChild is the 'S' matrix from RAM — isChild","text":"","code":"isChild(isChild_method, ped)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/isChild.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine isChild Status, isChild is the 'S' matrix from RAM — isChild","text":"isChild_method method determine isChild status ped pedigree data frame","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/isChild.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine isChild Status, isChild is the 'S' matrix from RAM — isChild","text":"isChild 'S' matrix","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/loadOrComputeCheckpoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Load or compute a checkpoint — loadOrComputeCheckpoint","title":"Load or compute a checkpoint — loadOrComputeCheckpoint","text":"Load compute checkpoint","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/loadOrComputeCheckpoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load or compute a checkpoint — loadOrComputeCheckpoint","text":"","code":"loadOrComputeCheckpoint(   file,   compute_fn,   config,   message_resume = NULL,   message_compute = NULL )"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/loadOrComputeCheckpoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load or compute a checkpoint — loadOrComputeCheckpoint","text":"file file path load checkpoint . compute_fn function compute checkpoint exist. config list containing configuration parameters `resume`, `verbose`, `saveable`. message_resume Optional message display resuming checkpoint. message_compute Optional message display computing checkpoint.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/loadOrComputeCheckpoint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load or compute a checkpoint — loadOrComputeCheckpoint","text":"loaded computed checkpoint.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/makeInbreeding.html","id":null,"dir":"Reference","previous_headings":"","what":"makeInbreeding A function to create inbred mates in the simulated pedigree data.frame. Inbred mates can be created by specifying their IDs or the generation the inbred mate should be created. When specifying the generation, inbreeding between siblings or 1st cousin needs to be specified. This is a supplementary function for simulatePedigree. — makeInbreeding","title":"makeInbreeding A function to create inbred mates in the simulated pedigree data.frame. Inbred mates can be created by specifying their IDs or the generation the inbred mate should be created. When specifying the generation, inbreeding between siblings or 1st cousin needs to be specified. This is a supplementary function for simulatePedigree. — makeInbreeding","text":"makeInbreeding function create inbred mates simulated pedigree data.frame. Inbred mates can created specifying IDs generation inbred mate created. specifying generation, inbreeding siblings 1st cousin needs specified. supplementary function simulatePedigree.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/makeInbreeding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"makeInbreeding A function to create inbred mates in the simulated pedigree data.frame. Inbred mates can be created by specifying their IDs or the generation the inbred mate should be created. When specifying the generation, inbreeding between siblings or 1st cousin needs to be specified. This is a supplementary function for simulatePedigree. — makeInbreeding","text":"","code":"makeInbreeding(   ped,   ID_mate1 = NA_integer_,   ID_mate2 = NA_integer_,   verbose = FALSE,   gen_inbred = 2,   type_inbred = \"sib\" )"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/makeInbreeding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"makeInbreeding A function to create inbred mates in the simulated pedigree data.frame. Inbred mates can be created by specifying their IDs or the generation the inbred mate should be created. When specifying the generation, inbreeding between siblings or 1st cousin needs to be specified. This is a supplementary function for simulatePedigree. — makeInbreeding","text":"ped data.frame format output simulatePedigree. ID_mate1 vector ID first mate. provided, function randomly select two individuals second generation. ID_mate2 vector ID second mate. verbose logical.  TRUE, print progress stages algorithm gen_inbred vector generation twin imputed. type_inbred character vector indicating type inbreeding. \"sib\" sibling inbreeding \"cousin\" cousin inbreeding.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/makeInbreeding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"makeInbreeding A function to create inbred mates in the simulated pedigree data.frame. Inbred mates can be created by specifying their IDs or the generation the inbred mate should be created. When specifying the generation, inbreeding between siblings or 1st cousin needs to be specified. This is a supplementary function for simulatePedigree. — makeInbreeding","text":"Returns data.frame inbred mates.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/makeInbreeding.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"makeInbreeding A function to create inbred mates in the simulated pedigree data.frame. Inbred mates can be created by specifying their IDs or the generation the inbred mate should be created. When specifying the generation, inbreeding between siblings or 1st cousin needs to be specified. This is a supplementary function for simulatePedigree. — makeInbreeding","text":"function creates inbred mates simulated pedigree data.frame. function's purpose evaluate effect inbreeding model fitting parameter estimation. case needs said, condone inbreeding real life. recognize common practice fields create inbred strains research purposes.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/makeTwins.html","id":null,"dir":"Reference","previous_headings":"","what":"makeTwins A function to impute twins in the simulated pedigree data.frame. Twins can be imputed by specifying their IDs or by specifying the generation the twin should be imputed. This is a supplementary function for simulatePedigree. — makeTwins","title":"makeTwins A function to impute twins in the simulated pedigree data.frame. Twins can be imputed by specifying their IDs or by specifying the generation the twin should be imputed. This is a supplementary function for simulatePedigree. — makeTwins","text":"makeTwins function impute twins simulated pedigree data.frame. Twins can imputed specifying IDs specifying generation twin imputed. supplementary function simulatePedigree.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/makeTwins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"makeTwins A function to impute twins in the simulated pedigree data.frame. Twins can be imputed by specifying their IDs or by specifying the generation the twin should be imputed. This is a supplementary function for simulatePedigree. — makeTwins","text":"","code":"makeTwins(   ped,   ID_twin1 = NA_integer_,   ID_twin2 = NA_integer_,   gen_twin = 2,   verbose = FALSE )"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/makeTwins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"makeTwins A function to impute twins in the simulated pedigree data.frame. Twins can be imputed by specifying their IDs or by specifying the generation the twin should be imputed. This is a supplementary function for simulatePedigree. — makeTwins","text":"ped data.frame format output simulatePedigree. ID_twin1 vector ID first twin. ID_twin2 vector ID second twin. gen_twin vector generation twin imputed. verbose logical.  TRUE, print progress stages algorithm","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/makeTwins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"makeTwins A function to impute twins in the simulated pedigree data.frame. Twins can be imputed by specifying their IDs or by specifying the generation the twin should be imputed. This is a supplementary function for simulatePedigree. — makeTwins","text":"Returns data.frame MZ twins information added new column.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/mapFAMC2parents.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign momID and dadID based on family mapping — mapFAMC2parents","title":"Assign momID and dadID based on family mapping — mapFAMC2parents","text":"function assigns mother father IDs individuals data frame based mapping family IDs parent IDs.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/mapFAMC2parents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign momID and dadID based on family mapping — mapFAMC2parents","text":"","code":"mapFAMC2parents(df_temp, family_to_parents)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/mapFAMC2parents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign momID and dadID based on family mapping — mapFAMC2parents","text":"df_temp data frame containing individual information. family_to_parents list mapping family IDs parent IDs.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/mapFAMC2parents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign momID and dadID based on family mapping — mapFAMC2parents","text":"data frame added momID dad_ID columns.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/mapFAMS2parents.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Mapping from Family IDs to Parent IDs — mapFAMS2parents","title":"Create a Mapping from Family IDs to Parent IDs — mapFAMS2parents","text":"function scans data frame creates mapping family IDs corresponding parent IDs.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/mapFAMS2parents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Mapping from Family IDs to Parent IDs — mapFAMS2parents","text":"","code":"mapFAMS2parents(df_temp)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/mapFAMS2parents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Mapping from Family IDs to Parent IDs — mapFAMS2parents","text":"df_temp data frame produced readGedcom().","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/mapFAMS2parents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Mapping from Family IDs to Parent IDs — mapFAMS2parents","text":"list mapping family IDs parent information.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/markPotentialChildren.html","id":null,"dir":"Reference","previous_headings":"","what":"Mark and Assign children — markPotentialChildren","title":"Mark and Assign children — markPotentialChildren","text":"subfunction marks individuals generation potential sons, daughters, parents based relationships assigns unique couple IDs. processes assignment roles relationships within generations pedigree simulation.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/markPotentialChildren.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mark and Assign children — markPotentialChildren","text":"","code":"markPotentialChildren(df_Ngen, i, Ngen, sizeGens, CoupleF)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/markPotentialChildren.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mark and Assign children — markPotentialChildren","text":"df_Ngen data frame current generation processed. must include columns individual IDs (`id`), spouse IDs (`spID`), sex (`sex`), previously assigned roles (`ifparent`, `ifson`, `ifdau`). Integer, index current generation processed. Ngen Integer, total number generations simulation. sizeGens Numeric vector, containing size (number individuals) generation. CoupleF Integer, MIGHT number couples current generation.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/markPotentialChildren.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mark and Assign children — markPotentialChildren","text":"Modifies `df_Ngen` place updating adding columns related individual roles         (`ifparent`, `ifson`, `ifdau`) couple IDs (`coupleId`). updated data frame         also returned integration larger pedigree data frame (`df_Fam`).","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/null2NA.html","id":null,"dir":"Reference","previous_headings":"","what":"nullToNA — null2NA","title":"nullToNA — null2NA","text":"nullToNA","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/null2NA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"nullToNA — null2NA","text":"","code":"null2NA(x)  nullToNA(x)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/null2NA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"nullToNA — null2NA","text":"x vector length","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/null2NA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"nullToNA — null2NA","text":"replaces null values vector NA","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/parseIndividualBlock.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a GEDCOM Individual Block — parseIndividualBlock","title":"Parse a GEDCOM Individual Block — parseIndividualBlock","text":"Processes block GEDCOM lines corresponding single individual.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/parseIndividualBlock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a GEDCOM Individual Block — parseIndividualBlock","text":"","code":"parseIndividualBlock(block, pattern_rows, all_var_names, verbose = FALSE)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/parseIndividualBlock.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a GEDCOM Individual Block — parseIndividualBlock","text":"block character vector containing GEDCOM lines one individual. pattern_rows list counts lines matching specific GEDCOM tags. all_var_names character vector variable names. verbose Logical indicating whether print progress messages.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/parseIndividualBlock.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a GEDCOM Individual Block — parseIndividualBlock","text":"named list representing parsed record individual, NULL ID found.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/parseNameLine.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a Full Name Line — parseNameLine","title":"Parse a Full Name Line — parseNameLine","text":"Extracts full name information GEDCOM \"NAME\" line updates record accordingly.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/parseNameLine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a Full Name Line — parseNameLine","text":"","code":"parseNameLine(line, record)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/parseNameLine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a Full Name Line — parseNameLine","text":"line character string containing name line. record named list representing individual's record.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/parseNameLine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a Full Name Line — parseNameLine","text":"updated record parsed name information.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/parseTreeRelationships.html","id":null,"dir":"Reference","previous_headings":"","what":"infer relationship from tree template — parseTreeRelationships","title":"infer relationship from tree template — parseTreeRelationships","text":"infer relationship tree template","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/parseTreeRelationships.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"infer relationship from tree template — parseTreeRelationships","text":"","code":"parseTreeRelationships(tree_long, tree_paths = NULL)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/parseTreeRelationships.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"infer relationship from tree template — parseTreeRelationships","text":"tree_long data frame containing tree structure long format. tree_paths Optional. traceTreePaths output. NULL, calculated.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/parseTreeRelationships.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"infer relationship from tree template — parseTreeRelationships","text":"data frame containing relationships family members.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ped2add.html","id":null,"dir":"Reference","previous_headings":"","what":"Take a pedigree and turn it into an additive genetics relatedness matrix — ped2add","title":"Take a pedigree and turn it into an additive genetics relatedness matrix — ped2add","text":"Take pedigree turn additive genetics relatedness matrix","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ped2add.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Take a pedigree and turn it into an additive genetics relatedness matrix — ped2add","text":"","code":"ped2add(   ped,   max.gen = 25,   sparse = TRUE,   verbose = FALSE,   gc = FALSE,   flatten.diag = FALSE,   standardize.colnames = TRUE,   transpose_method = \"tcrossprod\",   adjacency_method = \"direct\",   saveable = FALSE,   resume = FALSE,   save_rate = 5,   save_rate_gen = save_rate,   save_rate_parlist = 1e+05 * save_rate,   save_path = \"checkpoint/\",   ... )"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ped2add.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Take a pedigree and turn it into an additive genetics relatedness matrix — ped2add","text":"ped pedigree dataset.  Needs ID, momID, dadID columns max.gen maximum number generations compute (e.g., 4th degree relatives).  default 25. However can set infinity.  `Inf` uses many generations data. sparse logical.  TRUE, use return sparse matrices Matrix package verbose logical.  TRUE, print progress stages algorithm gc logical. TRUE, frequent garbage collection via gc save memory flatten.diag logical. TRUE, overwrite diagonal final relatedness matrix ones standardize.colnames logical. TRUE, standardize column names pedigree dataset transpose_method character. method use computing transpose.  Options \"tcrossprod\", \"crossprod\", \"star\" adjacency_method character. method use computing adjacency matrix.  Options \"loop\", \"indexed\", direct beta saveable logical. TRUE, save intermediate results disk resume logical. TRUE, resume checkpoint save_rate numeric. rate save intermediate results save_rate_gen numeric. rate save intermediate results generation. NULL, defaults save_rate save_rate_parlist numeric. rate save intermediate results parent list. NULL, defaults save_rate*1000 save_path character. path save checkpoint files ... additional arguments passed ped2com","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ped2add.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Take a pedigree and turn it into an additive genetics relatedness matrix — ped2add","text":"algorithms methodologies used function discussed exemplified vignette titled \"examplePedigreeFunctions\". advanced scenarios detailed explanations, consult vignette.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ped2ce.html","id":null,"dir":"Reference","previous_headings":"","what":"Take a pedigree and turn it into an extended environmental relatedness matrix — ped2ce","title":"Take a pedigree and turn it into an extended environmental relatedness matrix — ped2ce","text":"Take pedigree turn extended environmental relatedness matrix","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ped2ce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Take a pedigree and turn it into an extended environmental relatedness matrix — ped2ce","text":"","code":"ped2ce(ped, ...)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ped2ce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Take a pedigree and turn it into an extended environmental relatedness matrix — ped2ce","text":"ped pedigree dataset.  Needs ID, momID, dadID columns ... additional arguments passed ped2com","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ped2ce.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Take a pedigree and turn it into an extended environmental relatedness matrix — ped2ce","text":"algorithms methodologies used function discussed exemplified vignette titled \"examplePedigreeFunctions\". advanced scenarios detailed explanations, consult vignette.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ped2cn.html","id":null,"dir":"Reference","previous_headings":"","what":"Take a pedigree and turn it into a common nuclear environmental relatedness matrix — ped2cn","title":"Take a pedigree and turn it into a common nuclear environmental relatedness matrix — ped2cn","text":"Take pedigree turn common nuclear environmental relatedness matrix","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ped2cn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Take a pedigree and turn it into a common nuclear environmental relatedness matrix — ped2cn","text":"","code":"ped2cn(   ped,   max.gen = 25,   sparse = TRUE,   verbose = FALSE,   gc = FALSE,   flatten.diag = FALSE,   standardize.colnames = TRUE,   transpose_method = \"tcrossprod\",   saveable = FALSE,   resume = FALSE,   save_rate = 5,   adjacency_method = \"direct\",   save_rate_gen = save_rate,   save_rate_parlist = 1000 * save_rate,   save_path = \"checkpoint/\",   ... )"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ped2cn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Take a pedigree and turn it into a common nuclear environmental relatedness matrix — ped2cn","text":"ped pedigree dataset.  Needs ID, momID, dadID columns max.gen maximum number generations compute (e.g., 4th degree relatives).  default 25. However can set infinity.  `Inf` uses many generations data. sparse logical.  TRUE, use return sparse matrices Matrix package verbose logical.  TRUE, print progress stages algorithm gc logical. TRUE, frequent garbage collection via gc save memory flatten.diag logical. TRUE, overwrite diagonal final relatedness matrix ones standardize.colnames logical. TRUE, standardize column names pedigree dataset transpose_method character. method use computing transpose.  Options \"tcrossprod\", \"crossprod\", \"star\" saveable logical. TRUE, save intermediate results disk resume logical. TRUE, resume checkpoint save_rate numeric. rate save intermediate results adjacency_method character. method use computing adjacency matrix.  Options \"loop\", \"indexed\", direct beta save_rate_gen numeric. rate save intermediate results generation. NULL, defaults save_rate save_rate_parlist numeric. rate save intermediate results parent list. NULL, defaults save_rate*1000 save_path character. path save checkpoint files ... additional arguments passed ped2com","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ped2cn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Take a pedigree and turn it into a common nuclear environmental relatedness matrix — ped2cn","text":"algorithms methodologies used function discussed exemplified vignette titled \"examplePedigreeFunctions\". advanced scenarios detailed explanations, consult vignette.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ped2com.html","id":null,"dir":"Reference","previous_headings":"","what":"Take a pedigree and turn it into a relatedness matrix — ped2com","title":"Take a pedigree and turn it into a relatedness matrix — ped2com","text":"Take pedigree turn relatedness matrix","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ped2com.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Take a pedigree and turn it into a relatedness matrix — ped2com","text":"","code":"ped2com(   ped,   component,   max.gen = 25,   sparse = TRUE,   verbose = FALSE,   gc = FALSE,   flatten.diag = FALSE,   standardize.colnames = TRUE,   transpose_method = \"tcrossprod\",   adjacency_method = \"direct\",   isChild_method = \"classic\",   saveable = FALSE,   resume = FALSE,   save_rate = 5,   save_rate_gen = save_rate,   save_rate_parlist = 1e+05 * save_rate,   update_rate = 100,   save_path = \"checkpoint/\",   adjBeta_method = NULL,   ... )"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ped2com.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Take a pedigree and turn it into a relatedness matrix — ped2com","text":"ped pedigree dataset.  Needs ID, momID, dadID columns component character.  component pedigree return.  See Details. max.gen maximum number generations compute (e.g., 4th degree relatives).  default 25. However can set infinity.  `Inf` uses many generations data. sparse logical.  TRUE, use return sparse matrices Matrix package verbose logical.  TRUE, print progress stages algorithm gc logical. TRUE, frequent garbage collection via gc save memory flatten.diag logical. TRUE, overwrite diagonal final relatedness matrix ones standardize.colnames logical. TRUE, standardize column names pedigree dataset transpose_method character. method use computing transpose.  Options \"tcrossprod\", \"crossprod\", \"star\" adjacency_method character. method use computing adjacency matrix.  Options \"loop\", \"indexed\", direct beta isChild_method character. method use computing isChild matrix.  Options \"classic\" \"partialparent\" saveable logical. TRUE, save intermediate results disk resume logical. TRUE, resume checkpoint save_rate numeric. rate save intermediate results save_rate_gen numeric. rate save intermediate results generation. NULL, defaults save_rate save_rate_parlist numeric. rate save intermediate results parent list. NULL, defaults save_rate*1000 update_rate numeric. rate print progress save_path character. path save checkpoint files adjBeta_method numeric method use computing building adjacency_method matrix using \"beta\" build ... additional arguments passed ped2com","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ped2com.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Take a pedigree and turn it into a relatedness matrix — ped2com","text":"algorithms methodologies used function discussed exemplified vignette titled \"examplePedigreeFunctions\". advanced scenarios detailed explanations, consult vignette.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ped2fam.html","id":null,"dir":"Reference","previous_headings":"","what":"Segment Pedigree into Extended Families — ped2fam","title":"Segment Pedigree into Extended Families — ped2fam","text":"function adds extended family ID variable pedigree segmenting dataset independent extended families using weakly connected components algorithm.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ped2fam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Segment Pedigree into Extended Families — ped2fam","text":"","code":"ped2fam(   ped,   personID = \"ID\",   momID = \"momID\",   dadID = \"dadID\",   famID = \"famID\",   ... )"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ped2fam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Segment Pedigree into Extended Families — ped2fam","text":"ped pedigree dataset.  Needs ID, momID, dadID columns personID character.  Name column ped person ID variable momID character.  Name column ped mother ID variable dadID character.  Name column ped father ID variable famID character.  Name column created ped family ID variable ... additional arguments passed ped2com","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ped2fam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Segment Pedigree into Extended Families — ped2fam","text":"pedigree dataset one additional column newly created extended family ID","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ped2fam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Segment Pedigree into Extended Families — ped2fam","text":"general idea function use person ID, mother ID, father ID create extended family ID everyone family ID (perhaps extended) pedigree.  , pair people family ID least one traceable relation length one another. function works turning pedigree mathematical graph using igraph package.  graph form, function uses weakly connected components search possible relationship paths connect anyone data anyone else data.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ped2graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn a pedigree into a graph — ped2graph","title":"Turn a pedigree into a graph — ped2graph","text":"Turn pedigree graph","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ped2graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn a pedigree into a graph — ped2graph","text":"","code":"ped2graph(   ped,   personID = \"ID\",   momID = \"momID\",   dadID = \"dadID\",   directed = TRUE,   adjacent = c(\"parents\", \"mothers\", \"fathers\"),   ... )"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ped2graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn a pedigree into a graph — ped2graph","text":"ped pedigree dataset.  Needs ID, momID, dadID columns personID character.  Name column ped person ID variable momID character.  Name column ped mother ID variable dadID character.  Name column ped father ID variable directed Logical scalar. Default TRUE. Indicates whether create directed graph. adjacent Character.  Relationship defines adjacency graph: parents, mothers, fathers ... additional arguments passed ped2com","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ped2graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn a pedigree into a graph — ped2graph","text":"graph","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ped2graph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Turn a pedigree into a graph — ped2graph","text":"general idea function represent pedigree graph using igraph package. graph form, several common pedigree tasks become much simpler. adjacent argument allows different kinds graph structures. using parents adjacency, graph shows parent-child relationships. using mother adjacency, graph shows mother-child relationships. Similarly using father adjacency, father-child relationships appear graph. Construct extended families parent graph, maternal lines mothers graph, paternal lines fathers graph.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ped2maternal.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a maternal line ID variable to a pedigree — ped2maternal","title":"Add a maternal line ID variable to a pedigree — ped2maternal","text":"Add maternal line ID variable pedigree","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ped2maternal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a maternal line ID variable to a pedigree — ped2maternal","text":"","code":"ped2maternal(   ped,   personID = \"ID\",   momID = \"momID\",   dadID = \"dadID\",   matID = \"matID\",   ... )"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ped2maternal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a maternal line ID variable to a pedigree — ped2maternal","text":"ped pedigree dataset.  Needs ID, momID, dadID columns personID character.  Name column ped person ID variable momID character.  Name column ped mother ID variable dadID character.  Name column ped father ID variable matID Character. Maternal line ID variable created added pedigree ... additional arguments passed ped2com","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ped2maternal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a maternal line ID variable to a pedigree — ped2maternal","text":"various scenarios useful know people pedigree belong maternal lines.  function first turns pedigree graph adjacency defined mother-child relationships. Subsequently, weakly connected components algorithm finds separate maternal lines gives ID variable.","code":""},{"path":[]},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ped2mit.html","id":null,"dir":"Reference","previous_headings":"","what":"Take a pedigree and turn it into a mitochondrial relatedness matrix — ped2mit","title":"Take a pedigree and turn it into a mitochondrial relatedness matrix — ped2mit","text":"Take pedigree turn mitochondrial relatedness matrix","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ped2mit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Take a pedigree and turn it into a mitochondrial relatedness matrix — ped2mit","text":"","code":"ped2mit(   ped,   max.gen = 25,   sparse = TRUE,   verbose = FALSE,   gc = FALSE,   flatten.diag = FALSE,   standardize.colnames = TRUE,   transpose_method = \"tcrossprod\",   adjacency_method = \"direct\",   saveable = FALSE,   resume = FALSE,   save_rate = 5,   save_rate_gen = save_rate,   save_rate_parlist = 1e+05 * save_rate,   save_path = \"checkpoint/\",   ... )"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ped2mit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Take a pedigree and turn it into a mitochondrial relatedness matrix — ped2mit","text":"ped pedigree dataset.  Needs ID, momID, dadID columns max.gen maximum number generations compute (e.g., 4th degree relatives).  default 25. However can set infinity.  `Inf` uses many generations data. sparse logical.  TRUE, use return sparse matrices Matrix package verbose logical.  TRUE, print progress stages algorithm gc logical. TRUE, frequent garbage collection via gc save memory flatten.diag logical. TRUE, overwrite diagonal final relatedness matrix ones standardize.colnames logical. TRUE, standardize column names pedigree dataset transpose_method character. method use computing transpose.  Options \"tcrossprod\", \"crossprod\", \"star\" adjacency_method character. method use computing adjacency matrix.  Options \"loop\", \"indexed\", direct beta saveable logical. TRUE, save intermediate results disk resume logical. TRUE, resume checkpoint save_rate numeric. rate save intermediate results save_rate_gen numeric. rate save intermediate results generation. NULL, defaults save_rate save_rate_parlist numeric. rate save intermediate results parent list. NULL, defaults save_rate*1000 save_path character. path save checkpoint files ... additional arguments passed ped2com","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ped2mit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Take a pedigree and turn it into a mitochondrial relatedness matrix — ped2mit","text":"algorithms methodologies used function discussed exemplified vignette titled \"examplePedigreeFunctions\". advanced scenarios detailed explanations, consult vignette.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ped2paternal.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a paternal line ID variable to a pedigree — ped2paternal","title":"Add a paternal line ID variable to a pedigree — ped2paternal","text":"Add paternal line ID variable pedigree","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ped2paternal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a paternal line ID variable to a pedigree — ped2paternal","text":"","code":"ped2paternal(   ped,   personID = \"ID\",   momID = \"momID\",   dadID = \"dadID\",   patID = \"patID\",   ... )"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ped2paternal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a paternal line ID variable to a pedigree — ped2paternal","text":"ped pedigree dataset.  Needs ID, momID, dadID columns personID character.  Name column ped person ID variable momID character.  Name column ped mother ID variable dadID character.  Name column ped father ID variable patID Character.  Paternal line ID variable created added pedigree ... additional arguments passed ped2com","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/ped2paternal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a paternal line ID variable to a pedigree — ped2paternal","text":"various scenarios useful know people pedigree belong paternal lines.  function first turns pedigree graph adjacency defined father-child relationships. Subsequently, weakly connected components algorithm finds separate paternal lines gives ID variable.","code":""},{"path":[]},{"path":"https://r-computing-lab.github.io/BGmisc/reference/plotPedigree.html","id":null,"dir":"Reference","previous_headings":"","what":"plotPedigree A wrapped function to plot simulated pedigree from function simulatePedigree. This function require the installation of package kinship2. — plotPedigree","title":"plotPedigree A wrapped function to plot simulated pedigree from function simulatePedigree. This function require the installation of package kinship2. — plotPedigree","text":"plotPedigree wrapped function plot simulated pedigree function simulatePedigree. function require installation package kinship2.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/plotPedigree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plotPedigree A wrapped function to plot simulated pedigree from function simulatePedigree. This function require the installation of package kinship2. — plotPedigree","text":"","code":"plotPedigree(   ped,   code_male = NULL,   verbose = FALSE,   affected = NULL,   cex = 0.5,   col = 1,   symbolsize = 1,   branch = 0.6,   packed = TRUE,   align = c(1.5, 2),   width = 8,   density = c(-1, 35, 65, 20),   mar = c(2.1, 1, 2.1, 1),   angle = c(90, 65, 40, 0),   keep.par = FALSE,   pconnect = 0.5,   ... )"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/plotPedigree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotPedigree A wrapped function to plot simulated pedigree from function simulatePedigree. This function require the installation of package kinship2. — plotPedigree","text":"ped simulated pedigree data.frame function simulatePedigree. pedigree dataframe colnames dataframe simulated function simulatePedigree. code_male optional input allows indicate value sex variable codes male. recoded \"M\" (Male). NULL, recoding performed. verbose logical  TRUE, prints additional information. Default FALSE. affected optional parameter can either string specifying column name indicates affected status numeric/logical vector length number rows 'ped'. NULL, affected status assigned. cex font size IDs individual plot. col color id.  Default assigns color everyone. symbolsize controls symbolsize. Default=1. branch defines much angle used connect various levels nuclear families. packed default=T.  T, uniform distance individuals given level. align parameters control extra effort spent trying   align children underneath parents, without making pedigree   wide.  Set F speed plotting. width default=8.  packed pedigree, minimum width allowed realignment pedigrees. density defines density used symbols.  Takes 4 different values. mar margin parmeters, par function angle defines angle used symbols.  Takes 4 different values. keep.par Default = F, allows user keep parameter settings plotting (useful adding extras plot) pconnect connecting parent children program try   make connecting line close vertical possible, subject   lying inside endpoints line connects   children least pconnect people.  Setting option   large number force line connect midpoint   children. ... Extra options feed plot function.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/plotPedigree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plotPedigree A wrapped function to plot simulated pedigree from function simulatePedigree. This function require the installation of package kinship2. — plotPedigree","text":"plot provided pedigree","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/populateParents.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign Parent — populateParents","title":"Assign Parent — populateParents","text":"Assign Parent","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/populateParents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign Parent — populateParents","text":"","code":"populateParents(df, child, parent)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/populateParents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign Parent — populateParents","text":"df data frame containing relationships. child ID child. parent ID parent.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/populateParents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign Parent — populateParents","text":"data frame updated parent information.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/postProcessGedcom.html","id":null,"dir":"Reference","previous_headings":"","what":"Post-process GEDCOM Data Frame — postProcessGedcom","title":"Post-process GEDCOM Data Frame — postProcessGedcom","text":"function optionally adds parent information, combines duplicate columns, removes empty columns GEDCOM data frame.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/postProcessGedcom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post-process GEDCOM Data Frame — postProcessGedcom","text":"","code":"postProcessGedcom(   df_temp,   remove_empty_cols = TRUE,   combine_cols = TRUE,   add_parents = TRUE,   skinny = TRUE,   verbose = FALSE )"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/postProcessGedcom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post-process GEDCOM Data Frame — postProcessGedcom","text":"df_temp data frame produced readGedcom(). remove_empty_cols Logical indicating whether remove columns entirely missing. combine_cols Logical indicating whether combine columns duplicate values. add_parents Logical indicating whether add parent information. skinny Logical indicating whether slim data frame. verbose Logical indicating whether print progress messages.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/postProcessGedcom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Post-process GEDCOM Data Frame — postProcessGedcom","text":"post-processed data frame.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/potter.html","id":null,"dir":"Reference","previous_headings":"","what":"Fictional pedigree data on a wizarding family — potter","title":"Fictional pedigree data on a wizarding family — potter","text":"dataset created purely imagination includes subset Potter extended family.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/potter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fictional pedigree data on a wizarding family — potter","text":"","code":"data(potter)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/potter.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Fictional pedigree data on a wizarding family — potter","text":"data frame (ped object) 36 rows 8 variables","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/potter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fictional pedigree data on a wizarding family — potter","text":"variables follows: personID:  Person identification variable famID: Family identification variable name:  Name person gen: Generation person momID:  ID mother dadID:  ID father spouseID: ID spouse sex:  Sex ID: 1 male; 0 female IDs 100s momIDs dadIDs people dataset.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/processEventLine.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Event Lines (Birth or Death) — processEventLine","title":"Process Event Lines (Birth or Death) — processEventLine","text":"Extracts event details (e.g., date, place, cause, latitude, longitude) block GEDCOM lines. \"birth\": expect DATE line +1, PLAC +2, LATI +4, LONG +5. \"death\": expect DATE line +1, PLAC +2, CAUS +3, LATI +4, LONG +5.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/processEventLine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Event Lines (Birth or Death) — processEventLine","text":"","code":"processEventLine(event, block, i, record, pattern_rows)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/processEventLine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Event Lines (Birth or Death) — processEventLine","text":"event character string indicating event type (\"birth\" \"death\"). block character vector GEDCOM lines. current line index event tag found. record named list representing individual's record. pattern_rows list counts GEDCOM tag occurrences.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/processEventLine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Event Lines (Birth or Death) — processEventLine","text":"updated record parsed event information.#","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/processParents.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Parents Information from GEDCOM Data — processParents","title":"Process Parents Information from GEDCOM Data — processParents","text":"Adds parent IDs individuals based family relationship data.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/processParents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Parents Information from GEDCOM Data — processParents","text":"","code":"processParents(df_temp, datasource)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/processParents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Parents Information from GEDCOM Data — processParents","text":"df_temp data frame produced readGedcom(). datasource Character string indicating data source (\"gedcom\" \"wiki\").","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/processParents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Parents Information from GEDCOM Data — processParents","text":"updated data frame parent IDs added.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/process_one.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Sparse Relationship Matrices to Kinship Links for one Matrix — process_one","title":"Convert Sparse Relationship Matrices to Kinship Links for one Matrix — process_one","text":"Convert Sparse Relationship Matrices Kinship Links one Matrix","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/process_one.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Sparse Relationship Matrices to Kinship Links for one Matrix — process_one","text":"","code":"process_one(   matrix,   rel_name,   ids,   nc,   rel_pairs_file,   writetodisk,   write_buffer_size,   drop_upper_triangular,   update_rate,   verbose,   gc,   include_all_links = TRUE,   ... )"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/process_one.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Sparse Relationship Matrices to Kinship Links for one Matrix — process_one","text":"rel_pairs_file File path write related pairs (CSV format). writetodisk Logical. TRUE, writes related pairs disk; FALSE, returns data frame. write_buffer_size Number related pairs write disk time. drop_upper_triangular Logical. TRUE, drops upper triangular portion matrix. update_rate Numeric. Frequency (iterations) progress messages printed. verbose Logical. TRUE, prints progress messages. gc Logical. TRUE, performs garbage collection via gc free memory. include_all_links Logical. TRUE, links included output. ... Additional arguments passed com2links","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/process_tag.html","id":null,"dir":"Reference","previous_headings":"","what":"Process a GEDCOM Tag — process_tag","title":"Process a GEDCOM Tag — process_tag","text":"Extracts assigns value specified field `vars` pattern present. Returns updated variable list flag indicating whether tag matched.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/process_tag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process a GEDCOM Tag — process_tag","text":"","code":"process_tag(   tag,   field_name,   pattern_rows,   line,   vars,   extractor = NULL,   mode = \"replace\" )"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/process_tag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process a GEDCOM Tag — process_tag","text":"tag GEDCOM tag (e.g., \"SEX\", \"CAST\", etc.). field_name name variable assign `vars`. pattern_rows Output `countPatternRows()`. line GEDCOM line parse. vars current list variables update.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/process_tag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process a GEDCOM Tag — process_tag","text":"list updated `vars` `matched` flag.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/readGedcom.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a GEDCOM File — readGedcom","title":"Read a GEDCOM File — readGedcom","text":"function reads GEDCOM file parses structured data frame individuals.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/readGedcom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a GEDCOM File — readGedcom","text":"","code":"readGedcom(   file_path,   verbose = FALSE,   add_parents = TRUE,   remove_empty_cols = TRUE,   combine_cols = TRUE,   skinny = FALSE,   update_rate = 1000,   post_process = TRUE,   ... )  readGed(   file_path,   verbose = FALSE,   add_parents = TRUE,   remove_empty_cols = TRUE,   combine_cols = TRUE,   skinny = FALSE,   update_rate = 1000,   post_process = TRUE,   ... )  readgedcom(   file_path,   verbose = FALSE,   add_parents = TRUE,   remove_empty_cols = TRUE,   combine_cols = TRUE,   skinny = FALSE,   update_rate = 1000,   post_process = TRUE,   ... )"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/readGedcom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a GEDCOM File — readGedcom","text":"file_path path GEDCOM file. verbose logical value indicating whether print messages. add_parents logical value indicating whether add parents data frame. remove_empty_cols logical value indicating whether remove columns missing values. combine_cols logical value indicating whether combine columns duplicate values. skinny logical value indicating whether return skinny data frame. update_rate numeric. rate print progress post_process logical value indicating whether post-process data frame. ... Additional arguments passed function.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/readGedcom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a GEDCOM File — readGedcom","text":"data frame containing information individuals, following potential columns: - `id`: ID individual - `momID`: ID individual's mother - `dadID`: ID individual's father - `sex`: Sex individual - `name`: Full name individual - `name_given`: First name individual - `name_surn`: Last name individual - `name_marriedsurn`: Married name individual - `name_nick`: Nickname individual - `name_npfx`: Name prefix - `name_nsfx`: Name suffix - `birth_date`: Birth date individual - `birth_lat`: Latitude birthplace - `birth_long`: Longitude birthplace - `birth_place`: Birthplace individual - `death_caus`: Cause death - `death_date`: Death date individual - `death_lat`: Latitude place death - `death_long`: Longitude place death - `death_place`: Place death individual - `attribute_caste`: Caste individual - `attribute_children`: Number children individual - `attribute_description`: Description individual - `attribute_education`: Education individual - `attribute_idnumber`: Identification number individual - `attribute_marriages`: Number marriages individual - `attribute_nationality`: Nationality individual - `attribute_occupation`: Occupation individual - `attribute_property`: Property owned individual - `attribute_religion`: Religion individual - `attribute_residence`: Residence individual - `attribute_ssn`: Social security number individual - `attribute_title`: Title individual - `FAMC`: ID(s) family individual child - `FAMS`: ID(s) family individual spouse","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/readWikifamilytree.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Wiki Family Tree — readWikifamilytree","title":"Read Wiki Family Tree — readWikifamilytree","text":"Read Wiki Family Tree","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/readWikifamilytree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Wiki Family Tree — readWikifamilytree","text":"","code":"readWikifamilytree(text = NULL, verbose = FALSE, file_path = NULL, ...)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/readWikifamilytree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Wiki Family Tree — readWikifamilytree","text":"text character string containing text family tree wiki format. verbose logical value indicating whether print messages. file_path path file containing family tree. ... Additional arguments (used).","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/readWikifamilytree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Wiki Family Tree — readWikifamilytree","text":"list containing summary, members, structure, relationships family tree.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/recodeSex.html","id":null,"dir":"Reference","previous_headings":"","what":"Recodes Sex Variable in a Pedigree Dataframe — recodeSex","title":"Recodes Sex Variable in a Pedigree Dataframe — recodeSex","text":"function serves primarily used internally, plotting functions etc. sets `repair` flag TRUE automatically forwards additional parameters `checkSex`.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/recodeSex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recodes Sex Variable in a Pedigree Dataframe — recodeSex","text":"","code":"recodeSex(   ped,   verbose = FALSE,   code_male = NULL,   code_na = NULL,   code_female = NULL,   recode_male = \"M\",   recode_female = \"F\",   recode_na = NA_character_ )"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/recodeSex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recodes Sex Variable in a Pedigree Dataframe — recodeSex","text":"ped dataframe representing pedigree data 'sex' column. verbose logical flag indicating whether print progress validation messages console. code_male current code used represent males 'sex' column. code_na current value used missing values. code_female current code used represent females 'sex' column. NULL, recoding performed. recode_male value use males. Default \"M\" recode_female value use females. Default \"F\" recode_na value use missing values. Default NA_character_","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/recodeSex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recodes Sex Variable in a Pedigree Dataframe — recodeSex","text":"modified version input data.frame ped, containing additional modified 'sex_recode' column 'sex' values recoded according code_male. NA values 'sex' column preserved.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/recodeSex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recodes Sex Variable in a Pedigree Dataframe — recodeSex","text":"validation process identifies: - unique sex codes present dataset. - Whether individuals listed fathers mothers inconsistent sex codes. - Instances individual's recorded sex align parental role. `repair = TRUE`, function standardizes sex coding : - Assigning individuals listed fathers common male code dataset. - Assigning individuals listed mothers common female code. function uses terms 'male' 'female' biological context, referring chromosomal biologically-based characteristics necessary constructing genetic pedigrees. biological aspect sex used genetic analysis (genotype) distinct broader, richer concept gender identity (phenotype). recognize importance using language methodologies affirm respect full spectrum gender identities.  developers package express unequivocal support folx transgender LGBTQ+ communities.","code":""},{"path":[]},{"path":"https://r-computing-lab.github.io/BGmisc/reference/repairIDs.html","id":null,"dir":"Reference","previous_headings":"","what":"Repair Missing IDs — repairIDs","title":"Repair Missing IDs — repairIDs","text":"function repairs missing IDs pedigree.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/repairIDs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repair Missing IDs — repairIDs","text":"","code":"repairIDs(ped, verbose = FALSE)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/repairIDs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repair Missing IDs — repairIDs","text":"ped dataframe representing pedigree data columns `ID`, `dadID`, `momID`. verbose logical flag indicating whether print progress validation messages console.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/repairIDs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repair Missing IDs — repairIDs","text":"corrected pedigree","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/repairParentIDs.html","id":null,"dir":"Reference","previous_headings":"","what":"Repair Parent IDs — repairParentIDs","title":"Repair Parent IDs — repairParentIDs","text":"function repairs parent IDs pedigree.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/repairParentIDs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repair Parent IDs — repairParentIDs","text":"","code":"repairParentIDs(ped, verbose = FALSE)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/repairParentIDs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repair Parent IDs — repairParentIDs","text":"ped dataframe representing pedigree data columns 'ID', 'dadID', 'momID'. verbose logical flag indicating whether print progress validation messages console.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/repairParentIDs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repair Parent IDs — repairParentIDs","text":"corrected pedigree","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/repairSex.html","id":null,"dir":"Reference","previous_headings":"","what":"Repairs Sex Coding in a Pedigree Dataframe — repairSex","title":"Repairs Sex Coding in a Pedigree Dataframe — repairSex","text":"function serves wrapper around `checkSex` specifically handle repair sex coding pedigree dataframe.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/repairSex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repairs Sex Coding in a Pedigree Dataframe — repairSex","text":"","code":"repairSex(ped, verbose = FALSE, code_male = NULL, code_female = NULL)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/repairSex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repairs Sex Coding in a Pedigree Dataframe — repairSex","text":"ped dataframe representing pedigree data 'sex' column. verbose logical flag indicating whether print progress validation messages console. code_male current code used represent males 'sex' column. code_female current code used represent females 'sex' column. NULL, recoding performed.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/repairSex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repairs Sex Coding in a Pedigree Dataframe — repairSex","text":"modified version input data.frame ped, containing additional modified 'sex_recode' column 'sex' values recoded according code_male. NA values 'sex' column preserved.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/repairSex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Repairs Sex Coding in a Pedigree Dataframe — repairSex","text":"validation process identifies: - unique sex codes present dataset. - Whether individuals listed fathers mothers inconsistent sex codes. - Instances individual's recorded sex align parental role. `repair = TRUE`, function standardizes sex coding : - Assigning individuals listed fathers common male code dataset. - Assigning individuals listed mothers common female code. function uses terms 'male' 'female' biological context, referring chromosomal biologically-based characteristics necessary constructing genetic pedigrees. biological aspect sex used genetic analysis (genotype) distinct broader, richer concept gender identity (phenotype). recognize importance using language methodologies affirm respect full spectrum gender identities.  developers package express unequivocal support folx transgender LGBTQ+ communities.","code":""},{"path":[]},{"path":"https://r-computing-lab.github.io/BGmisc/reference/repairSex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repairs Sex Coding in a Pedigree Dataframe — repairSex","text":"","code":"if (FALSE) { # \\dontrun{ ped <- data.frame(ID = c(1, 2, 3), sex = c(\"M\", \"F\", \"M\")) repairSex(ped, code_male = \"M\", verbose = TRUE) } # }"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/resample.html","id":null,"dir":"Reference","previous_headings":"","what":"Resample Elements of a Vector — resample","title":"Resample Elements of a Vector — resample","text":"function performs resampling elements vector `x`. randomly shuffles elements `x` returns vector resampled elements. `x` empty, returns `NA_integer_`.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/resample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resample Elements of a Vector — resample","text":"","code":"resample(x, ...)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/resample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resample Elements of a Vector — resample","text":"x vector containing elements resampled. `x` empty, function return `NA_integer_`. ... Additional arguments passed `sample.int`, `size` number items sample `replace` indicating whether sampling replacement.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/resample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resample Elements of a Vector — resample","text":"vector resampled elements `x`. `x` empty, returns `NA_integer_`. length type returned vector depend input vector `x` additional arguments provided via `...`.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/rmvn.html","id":null,"dir":"Reference","previous_headings":"","what":"rmvn — rmvn","title":"rmvn — rmvn","text":"rmvn","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/rmvn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rmvn — rmvn","text":"","code":"rmvn(n, sigma)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/rmvn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rmvn — rmvn","text":"n Sample Size sigma Covariance matrix","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/rmvn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rmvn — rmvn","text":"Generates multivariate normal data covariance matrix (sigma) length n","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/royal92.html","id":null,"dir":"Reference","previous_headings":"","what":"Royal pedigree data from 1992 — royal92","title":"Royal pedigree data from 1992 — royal92","text":"dataset created Denis Reid Royal Families Europe.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/royal92.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Royal pedigree data from 1992 — royal92","text":"","code":"data(royal92)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/royal92.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Royal pedigree data from 1992 — royal92","text":"data frame 3110 observations","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/royal92.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Royal pedigree data from 1992 — royal92","text":"variables follows: id,momID,dadID,name,sex,birth_date,death_date,attribute_title id:  Person identification variable momID:  ID mother dadID:  ID father name:  Name person sex: Biological sex birth_date:  Date birth death_date:  Date death attribute_title:  Title person","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/simulatePedigree.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Pedigrees This function simulates ","title":"Simulate Pedigrees This function simulates ","text":"Simulate Pedigrees function simulates \"balanced\" pedigrees based group parameters: 1) k - Kids per couple; 2) G - Number generations; 3) p - Proportion males offspring; 4) r - Mating rate.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/simulatePedigree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Pedigrees This function simulates ","text":"","code":"simulatePedigree(   kpc = 3,   Ngen = 4,   sexR = 0.5,   marR = 2/3,   rd_kpc = FALSE,   balancedSex = TRUE,   balancedMar = TRUE,   verbose = FALSE )  SimPed(...)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/simulatePedigree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Pedigrees This function simulates ","text":"kpc Number kids per couple. integer >= 2 determines many kids fertilized mated couple pedigree. Default value 3. Returns error kpc equals 1. Ngen Number generations. integer >= 2 determines many generations simulated pedigree . first generation always fertilized couple. last generation mated individuals. sexR Sex ratio offspring. numeric value ranging 0 1 determines proportion males offspring pedigree. instance, 0.4 means 40 percent offspring male. marR Mating rate. numeric value ranging 0 1 determines proportion mated (fertilized) couples pedigree within generation. instance, marR = 0.5 suggests 50 percent offspring specific generation mated offspring. rd_kpc logical. TRUE, number kids per mate randomly generated poisson distribution mean kpc. FALSE, number kids per mate fixed kpc. balancedSex fully developed yet. Always TRUE current version. balancedMar fully developed yet. Always TRUE current version. verbose logical  TRUE, message progress stages algorithm ... Additional arguments passed functions.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/simulatePedigree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Pedigrees This function simulates ","text":"data.frame row representing simulated individual. columns follows: fam: family id simulated individual. 'fam1' single simulated pedigree. ID: unique personal ID simulated individual. first digit fam id; fourth digit generation individual ; following digits represent order individual within /pedigree. example, 100411 suggests individual family id 1, 4th generation, 11th individual 4th generation. gen: generation simulated individual . dadID: Personal ID individual's father. momID: Personal ID individual's mother. spID: Personal ID individual's mate. sex: Biological sex individual. F - female; M - male.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/splitIndividuals.html","id":null,"dir":"Reference","previous_headings":"","what":"Split GEDCOM Lines into Individual Blocks — splitIndividuals","title":"Split GEDCOM Lines into Individual Blocks — splitIndividuals","text":"function partitions GEDCOM file (vector lines) list blocks, block corresponds single individual starting \"@ INDI\" line.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/splitIndividuals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split GEDCOM Lines into Individual Blocks — splitIndividuals","text":"","code":"splitIndividuals(lines, verbose = FALSE)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/splitIndividuals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split GEDCOM Lines into Individual Blocks — splitIndividuals","text":"lines character vector lines GEDCOM file. verbose Logical indicating whether output progress messages.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/splitIndividuals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split GEDCOM Lines into Individual Blocks — splitIndividuals","text":"list character vectors, representing one individual.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/standardizeColnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardize Column Names in a Dataframe (Internal) — standardizeColnames","title":"Standardize Column Names in a Dataframe (Internal) — standardizeColnames","text":"internal function standardizes column names given dataframe. utilizes regular expressions `tolower()` function match column names list predefined standard names. approach case-insensitive allows flexible matching column names.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/standardizeColnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardize Column Names in a Dataframe (Internal) — standardizeColnames","text":"","code":"standardizeColnames(df, verbose = FALSE)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/standardizeColnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardize Column Names in a Dataframe (Internal) — standardizeColnames","text":"df dataframe whose column names need standardized. verbose logical indicating whether print progress messages.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/standardizeColnames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardize Column Names in a Dataframe (Internal) — standardizeColnames","text":"dataframe standardized column names.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/summarizeFamilies.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize the families in a pedigree — summarizeFamilies","title":"Summarize the families in a pedigree — summarizeFamilies","text":"Summarize families pedigree","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/summarizeFamilies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize the families in a pedigree — summarizeFamilies","text":"","code":"summarizeFamilies(   ped,   famID = \"famID\",   personID = \"ID\",   momID = \"momID\",   dadID = \"dadID\",   matID = \"matID\",   patID = \"patID\",   byr = NULL,   founder_sort_var = NULL,   include_founder = FALSE,   nbiggest = 5,   noldest = 5,   skip_var = NULL,   five_num_summary = FALSE,   verbose = FALSE )  summariseFamilies(   ped,   famID = \"famID\",   personID = \"ID\",   momID = \"momID\",   dadID = \"dadID\",   matID = \"matID\",   patID = \"patID\",   byr = NULL,   founder_sort_var = NULL,   include_founder = FALSE,   nbiggest = 5,   noldest = 5,   skip_var = NULL,   five_num_summary = FALSE,   verbose = FALSE )"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/summarizeFamilies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize the families in a pedigree — summarizeFamilies","text":"ped pedigree dataset.  Needs ID, momID, dadID columns famID character.  Name column created ped family ID variable personID character.  Name column ped person ID variable momID character.  Name column ped mother ID variable dadID character.  Name column ped father ID variable matID Character. Maternal line ID variable created added pedigree patID Character.  Paternal line ID variable created added pedigree byr Character. Optional column name birth year. Used determine oldest lineages. founder_sort_var Character. Column used determine founder lineage. Defaults `byr` (available) `personID` otherwise. include_founder Logical. `TRUE`, includes founder (originating member) lineage output. nbiggest Integer. Number largest lineages return (sorted count). noldest Integer. Number oldest lineages return (sorted birth year). skip_var Character vector. Variables exclude summary calculations. five_num_summary Logical. `TRUE`, includes first quartile (Q1) third quartile (Q3) addition minimum, median, maximum values. verbose Logical, TRUE, print progress messages.","code":""},{"path":[]},{"path":"https://r-computing-lab.github.io/BGmisc/reference/summarizeFounder.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to summarize the originating members for each line — summarizeFounder","title":"Function to summarize the originating members for each line — summarizeFounder","text":"function summarizes originating members line pedigree. supposed used internally summarize_pedigree function.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/summarizeFounder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to summarize the originating members for each line — summarizeFounder","text":"","code":"summarizeFounder(ped_dt, group_var, sort_var, foo_summary_dt, verbose)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/summarizeFounder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to summarize the originating members for each line — summarizeFounder","text":"sort_var character string specifying column name sort . verbose Logical, TRUE, print progress messages.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/summarizeMatrilines.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize the maternal lines in a pedigree — summarizeMatrilines","title":"Summarize the maternal lines in a pedigree — summarizeMatrilines","text":"Summarize maternal lines pedigree","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/summarizeMatrilines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize the maternal lines in a pedigree — summarizeMatrilines","text":"","code":"summarizeMatrilines(   ped,   famID = \"famID\",   personID = \"ID\",   momID = \"momID\",   dadID = \"dadID\",   matID = \"matID\",   patID = \"patID\",   byr = NULL,   include_founder = FALSE,   founder_sort_var = NULL,   nbiggest = 5,   noldest = 5,   skip_var = NULL,   five_num_summary = FALSE,   verbose = FALSE )  summariseMatrilines(   ped,   famID = \"famID\",   personID = \"ID\",   momID = \"momID\",   dadID = \"dadID\",   matID = \"matID\",   patID = \"patID\",   byr = NULL,   include_founder = FALSE,   founder_sort_var = NULL,   nbiggest = 5,   noldest = 5,   skip_var = NULL,   five_num_summary = FALSE,   verbose = FALSE )"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/summarizeMatrilines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize the maternal lines in a pedigree — summarizeMatrilines","text":"ped pedigree dataset.  Needs ID, momID, dadID columns famID character.  Name column created ped family ID variable personID character.  Name column ped person ID variable momID character.  Name column ped mother ID variable dadID character.  Name column ped father ID variable matID Character. Maternal line ID variable created added pedigree patID Character.  Paternal line ID variable created added pedigree byr Character. Optional column name birth year. Used determine oldest lineages. include_founder Logical. `TRUE`, includes founder (originating member) lineage output. founder_sort_var Character. Column used determine founder lineage. Defaults `byr` (available) `personID` otherwise. nbiggest Integer. Number largest lineages return (sorted count). noldest Integer. Number oldest lineages return (sorted birth year). skip_var Character vector. Variables exclude summary calculations. five_num_summary Logical. `TRUE`, includes first quartile (Q1) third quartile (Q3) addition minimum, median, maximum values. verbose Logical, TRUE, print progress messages.","code":""},{"path":[]},{"path":"https://r-computing-lab.github.io/BGmisc/reference/summarizePatrilines.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize the paternal lines in a pedigree — summarizePatrilines","title":"Summarize the paternal lines in a pedigree — summarizePatrilines","text":"Summarize paternal lines pedigree","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/summarizePatrilines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize the paternal lines in a pedigree — summarizePatrilines","text":"","code":"summarizePatrilines(   ped,   famID = \"famID\",   personID = \"ID\",   momID = \"momID\",   dadID = \"dadID\",   matID = \"matID\",   patID = \"patID\",   byr = NULL,   founder_sort_var = NULL,   include_founder = FALSE,   nbiggest = 5,   noldest = 5,   skip_var = NULL,   five_num_summary = FALSE,   verbose = FALSE )  summarisePatrilines(   ped,   famID = \"famID\",   personID = \"ID\",   momID = \"momID\",   dadID = \"dadID\",   matID = \"matID\",   patID = \"patID\",   byr = NULL,   founder_sort_var = NULL,   include_founder = FALSE,   nbiggest = 5,   noldest = 5,   skip_var = NULL,   five_num_summary = FALSE,   verbose = FALSE )"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/summarizePatrilines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize the paternal lines in a pedigree — summarizePatrilines","text":"ped pedigree dataset.  Needs ID, momID, dadID columns famID character.  Name column created ped family ID variable personID character.  Name column ped person ID variable momID character.  Name column ped mother ID variable dadID character.  Name column ped father ID variable matID Character. Maternal line ID variable created added pedigree patID Character.  Paternal line ID variable created added pedigree byr Character. Optional column name birth year. Used determine oldest lineages. founder_sort_var Character. Column used determine founder lineage. Defaults `byr` (available) `personID` otherwise. include_founder Logical. `TRUE`, includes founder (originating member) lineage output. nbiggest Integer. Number largest lineages return (sorted count). noldest Integer. Number oldest lineages return (sorted birth year). skip_var Character vector. Variables exclude summary calculations. five_num_summary Logical. `TRUE`, includes first quartile (Q1) third quartile (Q3) addition minimum, median, maximum values. verbose Logical, TRUE, print progress messages.","code":""},{"path":[]},{"path":"https://r-computing-lab.github.io/BGmisc/reference/summarizePedigrees.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Pedigree Data — summarizePedigrees","title":"Summarize Pedigree Data — summarizePedigrees","text":"function summarizes pedigree data, computing key summary statistics numeric variables identifying originating member (founder) family, maternal, paternal lineage.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/summarizePedigrees.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Pedigree Data — summarizePedigrees","text":"","code":"summarizePedigrees(   ped,   famID = \"famID\",   personID = \"ID\",   momID = \"momID\",   dadID = \"dadID\",   matID = \"matID\",   patID = \"patID\",   type = c(\"fathers\", \"mothers\", \"families\"),   byr = NULL,   include_founder = FALSE,   founder_sort_var = NULL,   nbiggest = 5,   noldest = nbiggest,   skip_var = NULL,   five_num_summary = FALSE,   network_checks = FALSE,   verbose = FALSE )  summarisePedigrees(   ped,   famID = \"famID\",   personID = \"ID\",   momID = \"momID\",   dadID = \"dadID\",   matID = \"matID\",   patID = \"patID\",   type = c(\"fathers\", \"mothers\", \"families\"),   byr = NULL,   include_founder = FALSE,   founder_sort_var = NULL,   nbiggest = 5,   noldest = nbiggest,   skip_var = NULL,   five_num_summary = FALSE,   network_checks = FALSE,   verbose = FALSE )"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/summarizePedigrees.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Pedigree Data — summarizePedigrees","text":"ped pedigree dataset.  Needs ID, momID, dadID columns famID character.  Name column created ped family ID variable personID character.  Name column ped person ID variable momID character.  Name column ped mother ID variable dadID character.  Name column ped father ID variable matID Character. Maternal line ID variable created added pedigree patID Character.  Paternal line ID variable created added pedigree type Character vector. Specifies summaries compute. Options: `\"fathers\"`, `\"mothers\"`, `\"families\"`. Default includes three. byr Character. Optional column name birth year. Used determine oldest lineages. include_founder Logical. `TRUE`, includes founder (originating member) lineage output. founder_sort_var Character. Column used determine founder lineage. Defaults `byr` (available) `personID` otherwise. nbiggest Integer. Number largest lineages return (sorted count). noldest Integer. Number oldest lineages return (sorted birth year). skip_var Character vector. Variables exclude summary calculations. five_num_summary Logical. `TRUE`, includes first quartile (Q1) third quartile (Q3) addition minimum, median, maximum values. network_checks Logical. `TRUE`, performs network checks pedigree data. verbose Logical, TRUE, print progress messages.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/summarizePedigrees.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Pedigree Data — summarizePedigrees","text":"data.frame (list) containing summary statistics family, maternal, paternal lines, well 5 oldest biggest lines.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/summarizePedigrees.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize Pedigree Data — summarizePedigrees","text":"function calculates standard descriptive statistics, including count individuals lineage, means, medians, minimum maximum values, standard deviations. Additionally, `five_num_summary = TRUE`, function includes first third quartiles (Q1, Q3) provide detailed distributional summary. Users can also specify variables exclude analysis via `skip_var`. Beyond summary statistics, function identifies founding member lineage based specified sorting variable (`founder_sort_var`), defaulting birth year (`byr`) available `personID` otherwise. Users can retrieve largest oldest lineages setting `nbiggest` `noldest`, respectively.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/traceTreePaths.html","id":null,"dir":"Reference","previous_headings":"","what":"Trace paths between individuals in a family tree grid — traceTreePaths","title":"Trace paths between individuals in a family tree grid — traceTreePaths","text":"Trace paths individuals family tree grid","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/traceTreePaths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trace paths between individuals in a family tree grid — traceTreePaths","text":"","code":"traceTreePaths(tree_long, deduplicate = TRUE)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/traceTreePaths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trace paths between individuals in a family tree grid — traceTreePaths","text":"tree_long data.frame columns: Row, Column, Value, id deduplicate Logical, TRUE, remove duplicate paths","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/traceTreePaths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trace paths between individuals in a family tree grid — traceTreePaths","text":"data.frame columns: from_id, to_id, direction, path_length, intermediates","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/tryNA.html","id":null,"dir":"Reference","previous_headings":"","what":"modified tryCatch function — tryNA","title":"modified tryCatch function — tryNA","text":"modified tryCatch function","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/tryNA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"modified tryCatch function — tryNA","text":"","code":"tryNA(x)  try_na(x)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/tryNA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"modified tryCatch function — tryNA","text":"x vector length","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/tryNA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"modified tryCatch function — tryNA","text":"Fuses nullToNA function efunc","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/validate_and_convert_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"validate_and_convert_matrix — validate_and_convert_matrix","title":"validate_and_convert_matrix — validate_and_convert_matrix","text":"function validates converts matrix specific format.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/validate_and_convert_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"validate_and_convert_matrix — validate_and_convert_matrix","text":"","code":"validate_and_convert_matrix(   mat,   name,   ensure_symmetric = FALSE,   force_binary = FALSE )"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/validate_and_convert_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"validate_and_convert_matrix — validate_and_convert_matrix","text":"mat matrix validated converted. name name matrix error messages. ensure_symmetric Logical indicating whether ensure matrix symmetric. force_binary Logical indicating whether force matrix binary.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/validate_and_convert_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"validate_and_convert_matrix — validate_and_convert_matrix","text":"validated converted matrix.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/vech.html","id":null,"dir":"Reference","previous_headings":"","what":"vech Create the half-vectorization of a matrix — vech","title":"vech Create the half-vectorization of a matrix — vech","text":"vech Create half-vectorization matrix","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/vech.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vech Create the half-vectorization of a matrix — vech","text":"","code":"vech(x)"},{"path":"https://r-computing-lab.github.io/BGmisc/reference/vech.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vech Create the half-vectorization of a matrix — vech","text":"x matrix, half-vectorization desired","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/vech.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vech Create the half-vectorization of a matrix — vech","text":"vector containing lower triangle matrix, including diagonal.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/vech.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vech Create the half-vectorization of a matrix — vech","text":"function returns vectorized form lower triangle matrix, including diagonal. upper triangle ignored checking provided matrix symmetric.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/reference/vech.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vech Create the half-vectorization of a matrix — vech","text":"","code":"vech(matrix(c(1, 0.5, 0.5, 1), nrow = 2, ncol = 2)) #> [1] 1.0 0.5 1.0"},{"path":[]},{"path":"https://r-computing-lab.github.io/BGmisc/news/index.html","id":"in-progress-1-4-1","dir":"Changelog","previous_headings":"","what":"In progress","title":"BGmisc 1.4.1","text":"replaced print message functions Exposed several internal functions user refactored addPhantomParents efficient add mtdna mitochondria aliases mitochondrial reorganized unit tests","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/news/index.html","id":"bgmisc-140","dir":"Changelog","previous_headings":"","what":"BGmisc 1.4.0","title":"BGmisc 1.4.0","text":"revived checkParents function check handling phantom parents missing parents added tests checkParents function added GoT analysis reduced complexity com2links, summarizePedigree, checkIDs use subfunctions allow verbose argument passed standardizeColnames list SimPed related_coef aliases functions harmonizing function names like calcFamilySize famSizeCal implemented adjBeta function evaluation alternative build method reorganize file names consistent harmonized famID","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/news/index.html","id":"bgmisc-1351","dir":"Changelog","previous_headings":"","what":"BGmisc 1.3.5.1","title":"BGmisc 1.3.5.1","text":"Setting default sparse argument ped2com() TRUE","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/news/index.html","id":"bgmisc-135","dir":"Changelog","previous_headings":"","what":"BGmisc 1.3.5","title":"BGmisc 1.3.5","text":"CRAN release: 2025-04-02 Added ASOIAF pedigree Added com2links() function convert components kinship links, accompanying tests Added extractWikiFamilyTree() function parse family trees wiki templates, accompanying tests Created vignette demonstrating adjacency matrix methods applications Improved plotPedigree() function silencing unnecessary invisible list outputs Added checkPedigreeNetwork() function validating pedigree network structure, accompanying tests","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/news/index.html","id":"bgmisc-1341","dir":"Changelog","previous_headings":"","what":"BGmisc 1.3.4.1","title":"BGmisc 1.3.4.1","text":"Hot fix resolve issue list adjacency matrix loading saved version Reoptimized generation calculation","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/news/index.html","id":"bgmisc-134","dir":"Changelog","previous_headings":"","what":"BGmisc 1.3.4","title":"BGmisc 1.3.4","text":"Added alternative (faster) methods create adjacency matrix Add tests comparison adjacency matrix build methods Added Royal Family pedigree","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/news/index.html","id":"bgmisc-133","dir":"Changelog","previous_headings":"","what":"BGmisc 1.3.3","title":"BGmisc 1.3.3","text":"CRAN release: 2025-02-19 Added ability save reload pedigree objects used ped2Com Optimized generation calculation Added tests summarizePedigree enhanced documentation","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/news/index.html","id":"bgmisc-1321","dir":"Changelog","previous_headings":"","what":"BGmisc 1.3.2.1","title":"BGmisc 1.3.2.1","text":"Added ability pass additional arguments ped2FOO functions","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/news/index.html","id":"bgmisc-132","dir":"Changelog","previous_headings":"","what":"BGmisc 1.3.2","title":"BGmisc 1.3.2","text":"CRAN release: 2024-06-18 Added tests identifyModel.R Modified tests MKL friendly","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/news/index.html","id":"bgmisc-131","dir":"Changelog","previous_headings":"","what":"BGmisc 1.3.1","title":"BGmisc 1.3.1","text":"CRAN release: 2024-06-16 Confirmed orcids correct Added gedcom importer","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/news/index.html","id":"bgmisc-1301","dir":"Changelog","previous_headings":"","what":"BGmisc 1.3.0.1","title":"BGmisc 1.3.0.1","text":"Created subfunctions reduce function complexity","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/news/index.html","id":"bgmisc-130","dir":"Changelog","previous_headings":"","what":"BGmisc 1.3.0","title":"BGmisc 1.3.0","text":"Harmonized function names Fixed incorrectly spelled last name Potter pedigree Added function summarize variables family, matrilinael, patrilineal lines Added within row duplicate ID checks Added data validation vignettes Harmonized function names arguments","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/news/index.html","id":"bgmisc-121","dir":"Changelog","previous_headings":"","what":"BGmisc 1.2.1","title":"BGmisc 1.2.1","text":"Added alternative transpose options matrix Added generalization Falconer’s formula","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/news/index.html","id":"bgmisc-120","dir":"Changelog","previous_headings":"","what":"BGmisc 1.2.0","title":"BGmisc 1.2.0","text":"CRAN release: 2024-02-26 Added numerous code checks, increased code coverage 85% Replaced sapply usage Added additional data validation checks Accompanying paper published Journal Open Source Software","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/news/index.html","id":"bgmisc-110","dir":"Changelog","previous_headings":"","what":"BGmisc 1.1.0","title":"BGmisc 1.1.0","text":"Added ability simulate twins Can now trace paternal maternal lines ’s now Harry Potter pedigree","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/news/index.html","id":"bgmisc-101","dir":"Changelog","previous_headings":"","what":"BGmisc 1.0.1","title":"BGmisc 1.0.1","text":"CRAN release: 2023-09-26 Hot fix resolve plotPedigree wrapper function breaking pedigrees contained multiple families","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/news/index.html","id":"bgmisc-10","dir":"Changelog","previous_headings":"","what":"BGmisc 1.0","title":"BGmisc 1.0","text":"CRAN release: 2023-09-20 Added major update include simulations, plotting, examples.","code":""},{"path":"https://r-computing-lab.github.io/BGmisc/news/index.html","id":"bgmisc-01","dir":"Changelog","previous_headings":"","what":"BGmisc 0.1","title":"BGmisc 0.1","text":"CRAN release: 2020-12-04 Added NEWS.md file track changes package. Initial version launched","code":""}]
